a:2:{s:4:"meta";a:3:{s:5:"title";s:9:"abcourses";s:5:"descr";s:56:"Please consider that this API file may be out of date...";s:7:"options";a:2:{s:10:"usageCount";N;s:19:"includeCodeAbstract";N;}}s:5:"files";a:16:{s:14:"MD5_726f04114b";a:4:{s:8:"filename";s:30:"pi1/class.tx_abcourses_pi1.php";s:8:"filesize";i:119720;s:6:"header";a:5:{s:4:"text";s:50:"

Plugin 'Courses' for the 'abcourses' extension.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:78:"@author	Andreas Behrens; Stefan Precht <behrens@b-networks.de; sprecht@gmx.de>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:70:"Andreas Behrens; Stefan Precht <behrens@b-networks.de; sprecht@gmx.de>";}}}s:3:"DAT";a:39:{i:1;a:7:{s:6:"header";s:45:"class tx_abcourses_pi1 extends tslib_pibase {";s:5:"class";i:1;s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:571;s:13:"content_lines";i:17;s:6:"atLine";i:36;}i:3;a:7:{s:6:"header";s:31:"function main($content,$conf)	{";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:4:"cDat";a:3:{s:4:"text";s:109:"

Main event function: Decides by the given CODEs which of the
functions to display events should be called.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:43:"$content : function output is added to this";}i:1;a:2:{i:0;s:5:"array";i:1;s:27:"$conf : configuration array";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:58:"$content: complete content generated by the tt_news plugin";}}s:7:"content";s:0:"";s:12:"content_size";i:2533;s:13:"content_lines";i:53;s:6:"atLine";i:62;}i:5;a:7:{s:6:"header";s:21:"function testDAL () {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:4:"cDat";a:3:{s:4:"text";s:28:"

For testing purposes only
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:105;s:13:"content_lines";i:5;s:6:"atLine";i:121;}i:7;a:7:{s:6:"header";s:22:"function init($conf) {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:4:"cDat";a:3:{s:4:"text";s:78:"

Init function. Triggered by the main function. Initialise different values.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:27:"$conf : configuration array";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:3006;s:13:"content_lines";i:75;s:6:"atLine";i:133;}i:9;a:7:{s:6:"header";s:45:"function displayCatoverview($content,$conf) {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:4:"cDat";a:3:{s:4:"text";s:37:"

This renders a categorie overview.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:8:"$content";}i:1;a:2:{i:0;s:5:"array";i:1;s:5:"$conf";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:36:": Returns an overview for categories";}}s:7:"content";s:0:"";s:12:"content_size";i:3192;s:13:"content_lines";i:74;s:6:"atLine";i:216;}i:11;a:7:{s:6:"header";s:45:"function displayCatoverviewWithNextEvents() {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:4:"cDat";a:3:{s:4:"text";s:112:"

This renders a categorie overview with informations about the next events of courses assigned to a categorie.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:31:": Categorie and event overview.";}}s:7:"content";s:0:"";s:12:"content_size";i:1242;s:13:"content_lines";i:26;s:6:"atLine";i:296;}i:13;a:7:{s:6:"header";s:34:"function displaySelectedEvents() {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:4:"cDat";a:3:{s:4:"text";s:65:"

This renders an overview of selected events and their courses.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:24:": Course/event overview.";}}s:7:"content";s:0:"";s:12:"content_size";i:1878;s:13:"content_lines";i:51;s:6:"atLine";i:328;}i:15;a:7:{s:6:"header";s:41:"function displayLMShort($content,$conf) {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:4:"cDat";a:3:{s:4:"text";s:75:"

This renders an short overview about courses/events marked as lastminute
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:55:"$content : Empty string. This has no function actually.";}i:1;a:2:{i:0;s:5:"array";i:1;s:34:"$conf : Hash array with TS config.";}}s:6:"return";a:2:{i:0;s:6:"String";i:1;s:20:": The rendered view.";}}s:7:"content";s:0:"";s:12:"content_size";i:4709;s:13:"content_lines";i:89;s:6:"atLine";i:387;}i:17;a:7:{s:6:"header";s:44:"function displayLMOverview($content,$conf) {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:4:"cDat";a:3:{s:4:"text";s:48:"

To display the listview of lastminute events

";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"content";i:1;s:15:"String Not used";}i:1;a:2:{i:0;s:4:"conf";i:1;s:48:"Array Contains the Plugin configuration from TS.";}}s:6:"return";a:2:{i:0;s:6:"String";i:1;s:47:"Returns the rendered view of lastminute events.";}}s:7:"content";s:0:"";s:12:"content_size";i:8051;s:13:"content_lines";i:137;s:6:"atLine";i:484;}i:19;a:7:{s:6:"header";s:46:"function displayCoursesInCat($content,$conf) {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:4:"cDat";a:3:{s:4:"text";s:63:"

This returns an view of all courses assigned to a categorie.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:12:"unknown_type";i:1;s:8:"$content";}i:1;a:2:{i:0;s:12:"unknown_type";i:1;s:5:"$conf";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:17:"The rendered view";}}s:7:"content";s:0:"";s:12:"content_size";i:991;s:13:"content_lines";i:21;s:6:"atLine";i:629;}i:21;a:6:{s:6:"header";s:45:"function displayQuicksearch($content,$conf) {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:417;s:13:"content_lines";i:9;s:6:"atLine";i:658;}i:23;a:6:{s:6:"header";s:44:"function displayResultlist($content,$conf) {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:1826;s:13:"content_lines";i:43;s:6:"atLine";i:675;}i:25;a:6:{s:6:"header";s:40:"function displayDetail($content,$conf) {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:20101;s:13:"content_lines";i:434;s:6:"atLine";i:726;}i:27;a:7:{s:6:"header";s:43:"function displaySubscribe($content,$conf) {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:4:"cDat";a:3:{s:4:"text";s:186:"

This function is responsible for rendering the subription view for an event. It should be triggered via a hyperlink with an id of the event the subription form should be rendered for.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:35:"$content: By default this is empty.";}i:1;a:2:{i:0;s:5:"array";i:1;s:50:"$conf: An array of TS configuration for this view.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:19:": The rendered view";}}s:7:"content";s:0:"";s:12:"content_size";i:5128;s:13:"content_lines";i:118;s:6:"atLine";i:1168;}i:29;a:7:{s:6:"header";s:35:"function takeNoticeOfContingent() {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:4:"cDat";a:3:{s:4:"text";s:64:"

Returns a flag to take notice of the event contingent or not.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:73;s:13:"content_lines";i:6;s:6:"atLine";i:1292;}i:31;a:7:{s:6:"header";s:47:"function validateContingentForEvent($eventId) {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:4:"cDat";a:5:{s:4:"text";s:84:"

Checks if it is possible to subscribe to this event, regarding on the contingent.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:29:"$eventId: The id of the event";}}s:6:"return";a:2:{i:0;s:8:"integer:";i:1;s:43:"Retuns 1 if you can subscribe to this event";}s:5:"other";a:1:{i:0;s:41:"@deprecated Use the cEvent Class instead.";}s:11:"other_index";a:1:{s:11:"@deprecated";a:1:{i:0;s:29:"Use the cEvent Class instead.";}}}s:7:"content";s:0:"";s:12:"content_size";i:1274;s:13:"content_lines";i:28;s:6:"atLine";i:1306;}i:33;a:6:{s:6:"header";s:38:"function displayHelp($content,$conf) {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:78;s:13:"content_lines";i:4;s:6:"atLine";i:1342;}i:35;a:6:{s:6:"header";s:83:"function displaySubscribeform($eventId,$MACourse,$MAEvent,$MATrainer,$MALocation) {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:6213;s:13:"content_lines";i:141;s:6:"atLine";i:1357;}i:37;a:6:{s:6:"header";s:48:"function calcPrice($price, $conf, $brutto='1') {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:706;s:13:"content_lines";i:20;s:6:"atLine";i:1508;}i:39;a:6:{s:6:"header";s:78:"function fillEventMA(&$MA,$lConf,$sCost='',$rsEvent='',$eventId='',$days='') {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:5359;s:13:"content_lines";i:107;s:6:"atLine";i:1540;}i:41;a:6:{s:6:"header";s:47:"function fillSimilarMa(&$MA,$lConf,$fClear=0) {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:656;s:13:"content_lines";i:11;s:6:"atLine";i:1656;}i:43;a:6:{s:6:"header";s:85:"function fillCourseMA(&$MA,$lConf,$rsCourse='',$courseId='',$eventId='',$prefix='') {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:7887;s:13:"content_lines";i:132;s:6:"atLine";i:1679;}i:45;a:7:{s:6:"header";s:95:"function fillCategorieMA(&$MA,$lConf,$rsCategorie='',$categorieId='',$courseId='',$prefix='') {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:4:"cDat";a:5:{s:4:"text";s:80:"

This fill an referenced MarkerArray with attributes of an specific category.

";s:5:"param";a:6:{i:0;a:2:{i:0;s:5:"array";i:1;s:30:"$MA	: referenced array to fill";}i:1;a:2:{i:0;s:5:"array";i:1;s:35:"$lConf: a piece of ts configuration";}i:2;a:2:{i:0;s:5:"array";i:1;s:56:"$rsCategorie : if set, this array is used for filling MA";}i:3;a:2:{i:0;s:7:"integer";i:1;s:92:"$categorieId : if set, this categorie will be loaded from database and is used for fillng MA";}i:4;a:2:{i:0;s:7:"integer";i:1;s:130:"$courseId : if set, the categorie wich is assigned with the given course id will be loaded from database and is used for fillng MA";}i:5;a:2:{i:0;s:6:"string";i:1;s:65:"$prefix: tablename or alias for tablename of the categorie table.";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:34:"@deprecated Use cCategory instead.";}s:11:"other_index";a:1:{s:11:"@deprecated";a:1:{i:0;s:22:"Use cCategory instead.";}}}s:7:"content";s:0:"";s:12:"content_size";i:3496;s:13:"content_lines";i:93;s:6:"atLine";i:1824;}i:47;a:6:{s:6:"header";s:70:"function fillTypeMA(&$MA,$lConf,$rsType='', $typeId='',$courseId='') {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:2122;s:13:"content_lines";i:61;s:6:"atLine";i:1928;}i:49;a:6:{s:6:"header";s:78:"function fillTrainerMA(&$MA,$lConf,$rsTrainer='', $trainerId='',$eventId='') {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:2643;s:13:"content_lines";i:58;s:6:"atLine";i:2000;}i:51;a:6:{s:6:"header";s:79:"function fillLocationMA(&$MA,$lConf,$rsLocation='',$locationId='',$eventId=''){";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:3133;s:13:"content_lines";i:58;s:6:"atLine";i:2069;}i:53;a:6:{s:6:"header";s:31:"function searchCourse($sWord) {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:1189;s:13:"content_lines";i:27;s:6:"atLine";i:2134;}i:55;a:7:{s:6:"header";s:75:"function startSubscription($MA,$MACourse,$MAEvent,$MATrainer,$MALocation) {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:4:"cDat";a:3:{s:4:"text";s:183:"

This function triggers an subsription hook and sends emails containing the subscription data.
It is responsible for increment the subscription counter for the subscribed event too.
";s:5:"param";a:5:{i:0;a:2:{i:0;s:5:"Array";i:1;s:27:"$MA	: Some marker arrays...";}i:1;a:2:{i:0;s:5:"Array";i:1;s:9:"$MACourse";}i:2;a:2:{i:0;s:5:"Array";i:1;s:8:"$MAEvent";}i:3;a:2:{i:0;s:5:"Array";i:1;s:10:"$MATrainer";}i:4;a:2:{i:0;s:5:"Array";i:1;s:11:"$MALocation";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:34:": true, if the mail could be sent.";}}s:7:"content";s:0:"";s:12:"content_size";i:1778;s:13:"content_lines";i:47;s:6:"atLine";i:2173;}i:57;a:6:{s:6:"header";s:43:"function incrementSubscriptions($eventId) {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:809;s:13:"content_lines";i:21;s:6:"atLine";i:2227;}i:59;a:6:{s:6:"header";s:84:"function sendMailToUser($MA,$MACourse='',$MAEvent='',$MATrainer='',$MALocation='') {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:5816;s:13:"content_lines";i:108;s:6:"atLine";i:2259;}i:61;a:6:{s:6:"header";s:47:"function fillAllLabels(&$MA, $loadFilter = 0) {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:5875;s:13:"content_lines";i:96;s:6:"atLine";i:2375;}i:63;a:6:{s:6:"header";s:33:"function fillFilterLabels(&$MA) {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:2388;s:13:"content_lines";i:50;s:6:"atLine";i:2478;}i:65;a:6:{s:6:"header";s:33:"function getFilterWhereClause() {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:5;s:13:"content_lines";i:2;s:6:"atLine";i:2534;}i:67;a:6:{s:6:"header";s:29:"function getCategoryArray() {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:417;s:13:"content_lines";i:14;s:6:"atLine";i:2542;}i:69;a:6:{s:6:"header";s:27:"function getCourseArray() {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:6;s:13:"content_lines";i:3;s:6:"atLine";i:2562;}i:71;a:7:{s:6:"header";s:29:"function getLocationArray() {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:4:"cDat";a:3:{s:4:"text";s:107:"

Returns an array with uid/title pairs of available locations. Returns false if no location is available.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:25:": uid/title pair || false";}}s:7:"content";s:0:"";s:12:"content_size";i:474;s:13:"content_lines";i:19;s:6:"atLine";i:2571;}i:73;a:6:{s:6:"header";s:25:"function getTypeArray() {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:7:"content";s:0:"";s:12:"content_size";i:5;s:13:"content_lines";i:2;s:6:"atLine";i:2596;}i:75;a:3:{s:6:"header";s:93:"function pi_linkTPWithAnchor($str,$anchor,$urlParameters=array(),$cache=0,$altPageId=0)
    {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:6:"atLine";i:2609;}i:77;a:7:{s:6:"header";s:84:"function renderSelectBox($name,$fieldList,$actValue=false,$renderEmptyOption=true) {";s:11:"parentClass";s:16:"tx_abcourses_pi1";s:4:"cDat";a:3:{s:4:"text";s:54:"

This function renders an select-box for html forms.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"string";i:1;s:22:"$name : Name attribute";}i:1;a:2:{i:0;s:5:"array";i:1;s:42:"$fieldList : Array with the wanted options";}i:2;a:2:{i:0;s:6:"string";i:1;s:86:"$actValue : If the form was send before, this value marks the currently selected value";}i:3;a:2:{i:0;s:7:"boolean";i:1;s:78:"$renderEmptyOption : Set this to true if you want an empty select option first";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:25:": the rendered select box";}}s:7:"content";s:0:"";s:12:"content_size";i:615;s:13:"content_lines";i:18;s:6:"atLine";i:2630;}}}s:14:"MD5_e273a873a8";a:4:{s:8:"filename";s:48:"pi1/classes/class.tx_abcourses.AbcoursesBase.php";s:8:"filesize";i:1263;s:6:"header";N;s:3:"DAT";a:5:{i:1;a:8:{s:6:"header";s:43:"class cAbcoursesBase extends tslib_pibase {";s:5:"class";i:1;s:11:"parentClass";s:14:"cAbcoursesBase";s:4:"cDat";a:3:{s:4:"text";s:44:"

Base class for abcourses content objects.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:24;s:13:"content_lines";i:2;s:6:"atLine";i:5;}i:3;a:7:{s:6:"header";s:29:"function checkErrors(&$obj) {";s:11:"parentClass";s:14:"cAbcoursesBase";s:4:"cDat";a:3:{s:4:"text";s:195:"

Check if an error occured for the referenced object and write the error message array to the logfile. If you set debugme flag true, the error messages are pushed into the debug() function too.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:4:"$obj";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:317;s:13:"content_lines";i:11;s:6:"atLine";i:14;}i:5;a:7:{s:6:"header";s:29:"function set_arrData($value){";s:11:"parentClass";s:14:"cAbcoursesBase";s:4:"cDat";a:3:{s:4:"text";s:28:"

To set an internal value.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:6:"$value";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:35;s:13:"content_lines";i:3;s:6:"atLine";i:32;}i:7;a:4:{s:6:"header";s:24:"function &get_arrData(){";s:11:"parentClass";s:14:"cAbcoursesBase";s:4:"cDat";a:3:{s:4:"text";s:55:"

This returns a reference to the internal data array.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:0:"";}}s:6:"atLine";i:41;}i:9;a:7:{s:6:"header";s:31:"function getSingleData($value){";s:11:"parentClass";s:14:"cAbcoursesBase";s:4:"cDat";a:3:{s:4:"text";s:53:"

Returns a single value of the internal data array.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:34:"$value: Each DB Field is possible.";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:42;s:13:"content_lines";i:3;s:6:"atLine";i:51;}}}s:14:"MD5_55c11d3b8d";a:4:{s:8:"filename";s:46:"pi1/classes/class.tx_abcourses.Arrangement.php";s:8:"filesize";i:1931;s:6:"header";N;s:3:"DAT";a:3:{i:1;a:8:{s:6:"header";s:43:"class cArrangement extends cAbcoursesBase {";s:5:"class";i:1;s:11:"parentClass";s:12:"cArrangement";s:4:"cDat";a:3:{s:4:"text";s:43:"

cArrangement object of abcourses plugin.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:50;s:13:"content_lines";i:3;s:6:"atLine";i:4;}i:3;a:4:{s:6:"header";s:44:"function loadData($arrangementId='',&$DAL) {";s:11:"parentClass";s:12:"cArrangement";s:4:"cDat";a:3:{s:4:"text";s:65:"

To initalise an cArrangement instance with the respective data
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:49:"$arrangementId Uid of the record you want to load";}i:1;a:2:{i:0;s:13:"cAbcoursesDAL";i:1;s:51:"$DAL Reference to the used data access layer object";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:6:"atLine";i:15;}i:5;a:7:{s:6:"header";s:47:"function printme($template, &$view, $conf='') {";s:11:"parentClass";s:12:"cArrangement";s:4:"cDat";a:3:{s:4:"text";s:81:"

This function render the view for this event, depending on the given template.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:48:"$template : The remplate for rendering the view.";}i:1;a:2:{i:0;s:6:"string";i:1;s:80:"&$cObj : A reference to the cObj of the pi1 class who wants to render this view.";}i:2;a:2:{i:0;s:6:"string";i:1;s:74:"$conf	: A snippet of TS configuration which should be used for this event.";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:878;s:13:"content_lines";i:22;s:6:"atLine";i:31;}}}s:14:"MD5_a08d7d60dc";a:4:{s:8:"filename";s:43:"pi1/classes/class.tx_abcourses.Category.php";s:8:"filesize";i:6508;s:6:"header";N;s:3:"DAT";a:7:{i:1;a:8:{s:6:"header";s:40:"class cCategory extends cAbcoursesBase {";s:5:"class";i:1;s:11:"parentClass";s:9:"cCategory";s:4:"cDat";a:3:{s:4:"text";s:43:"

cCategory class of the abcourses plugin.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:74;s:13:"content_lines";i:4;s:6:"atLine";i:4;}i:3;a:7:{s:6:"header";s:54:"function loadData($categoryId='',$courseId='',&$DAL) {";s:11:"parentClass";s:9:"cCategory";s:4:"cDat";a:3:{s:4:"text";s:134:"

To initalise an cCategory instance with the respective data. You can load this with an uid or with the uid of an associated course.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:7:"integer";i:1;s:46:"$categoryId Uid of the record you want to load";}i:1;a:2:{i:0;s:7:"integer";i:1;s:84:"$courseId Uid of a course, for which you would like to load the associated category.";}i:2;a:2:{i:0;s:13:"cAbcoursesDAL";i:1;s:51:"$DAL Reference to the used data access layer object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:287;s:13:"content_lines";i:11;s:6:"atLine";i:17;}i:5;a:7:{s:6:"header";s:79:"function load_arrCourses(&$objLoader,$onlyWithNextEvents = 0, $initEvents = 0){";s:11:"parentClass";s:9:"cCategory";s:4:"cDat";a:3:{s:4:"text";s:58:"

To load the internal course array of a category object.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:7:"cLoader";i:1;s:64:"$objLoader	Reference to an instance of the abcourses proxy class";}i:1;a:2:{i:0;s:7:"integer";i:1;s:242:"$onlyWithNextEvents	As example, if you set this to 2 the category gets 2 courses initialised with the closest event. Please consider that this is only a flag. You have to set the initEvents flag too, for initialising the events automatically.";}i:2;a:2:{i:0;s:7:"integer";i:1;s:150:"$initEvents	Set this flag if you would like to initialise the events of the courses too. If you do not set this, only the courses will be initialised.";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:1576;s:13:"content_lines";i:43;s:6:"atLine";i:37;}i:7;a:7:{s:6:"header";s:32:"function set_arrCourses($value){";s:11:"parentClass";s:9:"cCategory";s:4:"cDat";a:3:{s:4:"text";s:27:"

To set an internal value
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:6:"$value";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:39;s:13:"content_lines";i:3;s:6:"atLine";i:87;}i:9;a:7:{s:6:"header";s:27:"function &get_arrCourses(){";s:11:"parentClass";s:9:"cCategory";s:4:"cDat";a:3:{s:4:"text";s:57:"

This returns a reference to the internal course array.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:35:"Content of the array: id => cCourse";}}s:7:"content";s:0:"";s:12:"content_size";i:36;s:13:"content_lines";i:3;s:6:"atLine";i:96;}i:11;a:4:{s:6:"header";s:24:"function countCourses(){";s:11:"parentClass";s:9:"cCategory";s:4:"cDat";a:3:{s:4:"text";s:66:"

Returns how many courses are initialised in the internal array.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:0:"";}}s:6:"atLine";i:105;}i:13;a:7:{s:6:"header";s:44:"function printme($template, &$view, $conf) {";s:11:"parentClass";s:9:"cCategory";s:4:"cDat";a:3:{s:4:"text";s:120:"

This function render the view for this category, depending on the given template. Contained courses are rendered too.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:48:"$template : The remplate for rendering the view.";}i:1;a:2:{i:0;s:6:"string";i:1;s:80:"&$cObj : A reference to the cObj of the pi1 class who wants to render this view.";}i:2;a:2:{i:0;s:6:"string";i:1;s:77:"$conf	: A snippet of TS configuration which should be used for this category.";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:2264;s:13:"content_lines";i:58;s:6:"atLine";i:121;}}}s:14:"MD5_c7205eb4e7";a:4:{s:8:"filename";s:44:"pi1/classes/class.tx_abcourses.Categorys.php";s:8:"filesize";i:1532;s:6:"header";N;s:3:"DAT";a:4:{i:1;a:8:{s:6:"header";s:41:"class cCategorys extends cAbcoursesBase {";s:5:"class";i:1;s:11:"parentClass";s:10:"cCategorys";s:4:"cDat";a:3:{s:4:"text";s:159:"

cCategorys is as like a wrapper class for cCategory objects. It collects all available categorys in an internal array. This is used for category listings...
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:96;s:13:"content_lines";i:6;s:6:"atLine";i:5;}i:3;a:7:{s:6:"header";s:22:"function init(&$DAL) {";s:11:"parentClass";s:10:"cCategorys";s:4:"cDat";a:3:{s:4:"text";s:114:"

Initialise this object. Loads the internal array with category ids but does not initalise the category objects.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:13:"cAbcoursesDAL";i:1;s:46:"$DAL A reference to the used abstraction layer";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:120;s:13:"content_lines";i:5;s:6:"atLine";i:18;}i:5;a:4:{s:6:"header";s:21:"function loadData() {";s:11:"parentClass";s:10:"cCategorys";s:4:"cDat";a:3:{s:4:"text";s:81:"

Initialise the category objects and put them into the internal category array.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:6:"atLine";i:29;}i:7;a:7:{s:6:"header";s:37:"function getCategoryUidTitleArray() {";s:11:"parentClass";s:10:"cCategorys";s:4:"cDat";a:3:{s:4:"text";s:63:"

Returns a list with all uid->title pairs of loaded categorys
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:258;s:13:"content_lines";i:13;s:6:"atLine";i:45;}}}s:14:"MD5_8b32a1be8a";a:4:{s:8:"filename";s:41:"pi1/classes/class.tx_abcourses.Course.php";s:8:"filesize";i:16310;s:6:"header";N;s:3:"DAT";a:13:{i:1;a:8:{s:6:"header";s:37:"class cCourse extends cAbcoursesBase{";s:5:"class";i:1;s:11:"parentClass";s:7:"cCourse";s:4:"cDat";a:3:{s:4:"text";s:72:"

The cCourse class handles the course records of the abcourses plugin.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:160;s:13:"content_lines";i:8;s:6:"atLine";i:6;}i:3;a:7:{s:6:"header";s:51:"function loadData($courseId='',$eventId='',&$DAL) {";s:11:"parentClass";s:7:"cCourse";s:4:"cDat";a:3:{s:4:"text";s:102:"

This loads the data of a course record, depending to a passed courseId or an corresponding eventId.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:7:"integer";i:1;s:55:"$courseId	Id of the course record you would like to get";}i:1;a:2:{i:0;s:7:"integer";i:1;s:57:"$eventId Get an course record with an associated event id";}i:2;a:2:{i:0;s:13:"cAbcoursesDAL";i:1;s:46:"$DAL A reference to the used abstraction layer";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:175;s:13:"content_lines";i:7;s:6:"atLine";i:23;}i:5;a:7:{s:6:"header";s:23:"function countEvents(){";s:11:"parentClass";s:7:"cCourse";s:4:"cDat";a:3:{s:4:"text";s:52:"

Returns how many events are currently initialised
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:111;s:13:"content_lines";i:7;s:6:"atLine";i:36;}i:7;a:7:{s:6:"header";s:29:"function countTeachingaids(){";s:11:"parentClass";s:7:"cCourse";s:4:"cDat";a:3:{s:4:"text";s:59:"

Returns how many teaching aids are currently initialised
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:123;s:13:"content_lines";i:7;s:6:"atLine";i:49;}i:9;a:7:{s:6:"header";s:24:"function countTrainer(){";s:11:"parentClass";s:7:"cCourse";s:4:"cDat";a:3:{s:4:"text";s:53:"

Returns how many trainer are currently initialised
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:113;s:13:"content_lines";i:7;s:6:"atLine";i:62;}i:11;a:7:{s:6:"header";s:38:"function load_arrTrainer(&$objLoader){";s:11:"parentClass";s:7:"cCourse";s:4:"cDat";a:3:{s:4:"text";s:35:"

Load the internal trainer array.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:12:"unknown_type";i:1;s:46:"$objLoader A reference to the used proxy class";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:794;s:13:"content_lines";i:27;s:6:"atLine";i:76;}i:13;a:7:{s:6:"header";s:43:"function load_arrTeachingaids(&$objLoader){";s:11:"parentClass";s:7:"cCourse";s:4:"cDat";a:3:{s:4:"text";s:44:"

Load the internal array of teaching aids.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:12:"unknown_type";i:1;s:46:"$objLoader A reference to the used proxy class";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:865;s:13:"content_lines";i:28;s:6:"atLine";i:110;}i:15;a:7:{s:6:"header";s:79:"function load_arrEvents(&$objLoader,$showeventsago = 0,$displayEventInList=''){";s:11:"parentClass";s:7:"cCourse";s:4:"cDat";a:3:{s:4:"text";s:41:"

Loads the events array of this course.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:7:"cLoader";i:1;s:47:"$objLoader: An reference to a cLoader instance.";}i:1;a:2:{i:0;s:7:"integer";i:1;s:107:"$showeventsago: Set this e.g. to "2" if you want to load events too which are out of date since max 2 days.";}i:2;a:2:{i:0;s:5:"array";i:1;s:116:"$displayEventInList: Arraykey is the eventid and value is 1 if you want to load only special events for this course.";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:1532;s:13:"content_lines";i:43;s:6:"atLine";i:147;}i:17;a:7:{s:6:"header";s:41:"function addEvent($eventId,&$objLoader) {";s:11:"parentClass";s:7:"cCourse";s:4:"cDat";a:3:{s:4:"text";s:94:"

This function initialise one single event and add it to the internal array for later usage.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:47:"$eventId : The id of the event you want to add.";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:15:"$objLoader: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:205;s:13:"content_lines";i:6;s:6:"atLine";i:198;}i:19;a:7:{s:6:"header";s:37:"function set_arrTeachingaids($value){";s:11:"parentClass";s:7:"cCourse";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$value: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:43;s:13:"content_lines";i:3;s:6:"atLine";i:211;}i:21;a:7:{s:6:"header";s:32:"function &get_arrTeachingaids(){";s:11:"parentClass";s:7:"cCourse";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:42;s:13:"content_lines";i:3;s:6:"atLine";i:220;}i:23;a:4:{s:6:"header";s:40:"function setDisplayNextEventOnly($val) {";s:11:"parentClass";s:7:"cCourse";s:4:"cDat";a:3:{s:4:"text";s:156:"

If you call this with "1" this course will load only the next event, when load_arrEvents is called. You have to call this BEFORE you call load_arrEvents.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:40:"$val Set this to 1 or 0 || true or false";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:6:"atLine";i:230;}i:25;a:7:{s:6:"header";s:44:"function printme($template, &$view, $conf) {";s:11:"parentClass";s:7:"cCourse";s:4:"cDat";a:3:{s:4:"text";s:119:"

This function render the view for this course, depending on the given template. Initialised events are rendered too.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:48:"$template : The remplate for rendering the view.";}i:1;a:2:{i:0;s:6:"string";i:1;s:80:"&$cObj : A reference to the cObj of the pi1 class who wants to render this view.";}i:2;a:2:{i:0;s:6:"string";i:1;s:75:"$conf	: A snippet of TS configuration which should be used for this course.";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:9090;s:13:"content_lines";i:144;s:6:"atLine";i:242;}}}s:14:"MD5_0502913ee6";a:4:{s:8:"filename";s:40:"pi1/classes/class.tx_abcourses.Event.php";s:8:"filesize";i:8048;s:6:"header";N;s:3:"DAT";a:7:{i:1;a:8:{s:6:"header";s:37:"class cEvent extends cAbcoursesBase {";s:5:"class";i:1;s:11:"parentClass";s:6:"cEvent";s:4:"cDat";a:3:{s:4:"text";s:59:"

This class is for handle events of the abcourses plugin.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:94;s:13:"content_lines";i:5;s:6:"atLine";i:6;}i:3;a:7:{s:6:"header";s:38:"function loadData($eventId='',&$DAL) {";s:11:"parentClass";s:6:"cEvent";s:4:"cDat";a:3:{s:4:"text";s:61:"

This function load the event data related to the given id.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:32:"$eventId Id of the event record.";}i:1;a:2:{i:0;s:13:"cAbcoursesDAL";i:1;s:50:"$DAL Reference to the used data abstraction layer.";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:167;s:13:"content_lines";i:7;s:6:"atLine";i:19;}i:5;a:7:{s:6:"header";s:37:"function load_arrHotels(&$objLoader){";s:11:"parentClass";s:6:"cEvent";s:4:"cDat";a:3:{s:4:"text";s:104:"

This function load hotels to the internal array depending on arrangements associated with this event.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"cLoader";i:1;s:40:": A reference to the used loader object.";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:1002;s:13:"content_lines";i:32;s:6:"atLine";i:33;}i:7;a:7:{s:6:"header";s:26:"function &get_arrHotels(){";s:11:"parentClass";s:6:"cEvent";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:36;s:13:"content_lines";i:3;s:6:"atLine";i:71;}i:9;a:7:{s:6:"header";s:23:"function countHotels(){";s:11:"parentClass";s:6:"cEvent";s:4:"cDat";a:3:{s:4:"text";s:44:"

Returns the number of initialised hotels.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:111;s:13:"content_lines";i:7;s:6:"atLine";i:80;}i:11;a:4:{s:6:"header";s:32:"function subscribeable(&$view) {";s:11:"parentClass";s:6:"cEvent";s:4:"cDat";a:3:{s:4:"text";s:77:"

Returns if you can subscribe an event or not, regarding on the contingent.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"class";i:1;s:75:"$view: An referenced instance of the pi1 class who wants to return the view";}}s:6:"return";a:2:{i:0;s:8:"integer:";i:1;s:45:"Returns 1 if you can subscribe to this event.";}}s:6:"atLine";i:94;}i:13;a:7:{s:6:"header";s:56:"function printme($template, &$view, $conf, $costs = 0) {";s:11:"parentClass";s:6:"cEvent";s:4:"cDat";a:3:{s:4:"text";s:81:"

This function render the view for this event, depending on the given template.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:6:"string";i:1;s:48:"$template : The remplate for rendering the view.";}i:1;a:2:{i:0;s:6:"string";i:1;s:80:"&$cObj : A reference to the cObj of the pi1 class who wants to render this view.";}i:2;a:2:{i:0;s:6:"string";i:1;s:74:"$conf	: A snippet of TS configuration which should be used for this event.";}i:3;a:2:{i:0;s:6:"[type]";i:1;s:11:"$costs: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:4809;s:13:"content_lines";i:83;s:6:"atLine";i:113;}}}s:14:"MD5_811884fa16";a:4:{s:8:"filename";s:40:"pi1/classes/class.tx_abcourses.Hotel.php";s:8:"filesize";i:5607;s:6:"header";N;s:3:"DAT";a:8:{i:1;a:7:{s:6:"header";s:37:"class cHotel extends cAbcoursesBase {";s:5:"class";i:1;s:11:"parentClass";s:6:"cHotel";s:7:"content";s:0:"";s:12:"content_size";i:78;s:13:"content_lines";i:4;s:6:"atLine";i:0;}i:3;a:7:{s:6:"header";s:56:"function loadData($hotelId='',$arrangementId='',&$DAL) {";s:11:"parentClass";s:6:"cHotel";s:4:"cDat";a:3:{s:4:"text";s:124:"

This loads the data of a hotel record. Corresponding to a hotelId or an arrangement id. Passed hotel id takes precedence.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:7:"integer";i:1;s:8:"$hotelId";}i:1;a:2:{i:0;s:7:"integer";i:1;s:14:"$arrangementId";}i:2;a:2:{i:0;s:13:"cAbcoursesDAL";i:1;s:49:"$DAL Reference to the used data abstraction layer";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:285;s:13:"content_lines";i:11;s:6:"atLine";i:13;}i:5;a:7:{s:6:"header";s:53:"function addArrangement($arrangementId,&$objLoader) {";s:11:"parentClass";s:6:"cHotel";s:4:"cDat";a:3:{s:4:"text";s:100:"

This function initialise one single arrangement and add it to the internal array for later usage.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:57:"$arrangementId : The id of the arrangemt you want to add.";}i:1;a:2:{i:0;s:6:"[type]";i:1;s:15:"$objLoader: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:257;s:13:"content_lines";i:6;s:6:"atLine";i:32;}i:7;a:7:{s:6:"header";s:42:"function load_arrArrangement(&$objLoader){";s:11:"parentClass";s:6:"cHotel";s:4:"cDat";a:3:{s:4:"text";s:39:"

Load the internal arrangement array.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"cLoader";i:1;s:39:"$objLoader Reference to the proxy class";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:1046;s:13:"content_lines";i:31;s:6:"atLine";i:45;}i:9;a:7:{s:6:"header";s:36:"function set_arrArrangement($value){";s:11:"parentClass";s:6:"cHotel";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:11:"$value: ...";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:42;s:13:"content_lines";i:3;s:6:"atLine";i:83;}i:11;a:7:{s:6:"header";s:31:"function &get_arrArrangement(){";s:11:"parentClass";s:6:"cHotel";s:4:"cDat";a:3:{s:4:"text";s:25:"

[Describe function...]
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:40;s:13:"content_lines";i:3;s:6:"atLine";i:92;}i:13;a:4:{s:6:"header";s:29:"function countArrangements(){";s:11:"parentClass";s:6:"cHotel";s:4:"cDat";a:3:{s:4:"text";s:49:"

Returns the number of initalised arrangements.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:0:"";}}s:6:"atLine";i:101;}i:15;a:7:{s:6:"header";s:44:"function printme($template, &$view, $conf) {";s:11:"parentClass";s:6:"cHotel";s:4:"cDat";a:3:{s:4:"text";s:122:"

This function render the view for this hotel, depending on the given template. Contained arrangements are rendered too.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:48:"$template : The remplate for rendering the view.";}i:1;a:2:{i:0;s:6:"string";i:1;s:80:"&$cObj : A reference to the cObj of the pi1 class who wants to render this view.";}i:2;a:2:{i:0;s:6:"string";i:1;s:74:"$conf	: A snippet of TS configuration which should be used for this hotel.";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:2052;s:13:"content_lines";i:43;s:6:"atLine";i:117;}}}s:14:"MD5_f7fa9c65b4";a:4:{s:8:"filename";s:41:"pi1/classes/class.tx_abcourses.Loader.php";s:8:"filesize";i:14616;s:6:"header";N;s:3:"DAT";a:24:{i:1;a:8:{s:6:"header";s:15:"class cLoader {";s:5:"class";i:1;s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:109:"

This is the persistence proxy class for abcourses... Use this class to get instances of different classes.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:717;s:13:"content_lines";i:16;s:6:"atLine";i:4;}i:3;a:7:{s:6:"header";s:46:"function init($conf,$pages,$recursive,&$cObj){";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:81:"

To initialise the proxy class. Normally this is already done by the pi1 class.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:5:"array";i:1;s:22:"$conf	TS configuration";}i:1;a:2:{i:0;s:6:"string";i:1;s:48:"$pages	list of page id's to look up records from";}i:2;a:2:{i:0;s:7:"integer";i:1;s:26:"$recursive	recursive level";}i:3;a:2:{i:0;s:10:"tslib_cobj";i:1;s:88:"$cObj	Instance of an tslib_cobj instance. Usually the instance as used by the pi1 class.";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:299;s:13:"content_lines";i:8;s:6:"atLine";i:30;}i:5;a:7:{s:6:"header";s:29:"function load_objLocations(){";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:64:"

This function initialise the internal attribute $objLocations
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:47:"Returns 1 for success and 0 if an error occured";}}s:7:"content";s:0:"";s:12:"content_size";i:345;s:13:"content_lines";i:13;s:6:"atLine";i:44;}i:7;a:7:{s:6:"header";s:29:"function load_objCategorys(){";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:64:"

This function initialise the internal attribute $objCategorys
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:47:"Returns 1 for success and 0 if an error occured";}}s:7:"content";s:0:"";s:12:"content_size";i:411;s:13:"content_lines";i:15;s:6:"atLine";i:63;}i:9;a:7:{s:6:"header";s:52:"function listSimilarCourses($byTitle,$expectId='') {";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:50:"

Returns an array with uid's of similar courses.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:53:"$byTitle	Similar courses are looked up with an title.";}i:1;a:2:{i:0;s:12:"unknown_type";i:1;s:88:"$expectId	The integer passed for this will not be included in the returned integer list.";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:36:"Array with uid's of similar courses.";}}s:7:"content";s:0:"";s:12:"content_size";i:161;s:13:"content_lines";i:8;s:6:"atLine";i:86;}i:11;a:7:{s:6:"header";s:52:"function load_arrCourses($courseId='',$eventId='') {";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:126:"

Initialize the internal course array. You can use this, if you want to load some courses without an instance of cCategorys.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:65:"$courseId: The id of a course you want add to the internal array.";}i:1;a:2:{i:0;s:7:"integer";i:1;s:102:"$eventId: The id of an event you want to use to load the corresponding course into the internal array.";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:191;s:13:"content_lines";i:10;s:6:"atLine";i:102;}i:13;a:7:{s:6:"header";s:26:"function set_conf($value){";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:37:"

Set function for an internal value
";s:5:"param";a:1:{i:0;a:2:{i:0;s:12:"unknown_type";i:1;s:6:"$value";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:33;s:13:"content_lines";i:3;s:6:"atLine";i:119;}i:15;a:7:{s:6:"header";s:27:"function set_pages($value){";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:37:"

Set function for an internal value
";s:5:"param";a:1:{i:0;a:2:{i:0;s:12:"unknown_type";i:1;s:6:"$value";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:34;s:13:"content_lines";i:3;s:6:"atLine";i:129;}i:17;a:7:{s:6:"header";s:31:"function set_recursive($value){";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:37:"

Set function for an internal value
";s:5:"param";a:1:{i:0;a:2:{i:0;s:12:"unknown_type";i:1;s:6:"$value";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:38;s:13:"content_lines";i:3;s:6:"atLine";i:139;}i:19;a:7:{s:6:"header";s:26:"function set_cObj($value){";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:37:"

Set function for an internal value
";s:5:"param";a:1:{i:0;a:2:{i:0;s:12:"unknown_type";i:1;s:6:"$value";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:33;s:13:"content_lines";i:3;s:6:"atLine";i:149;}i:21;a:7:{s:6:"header";s:26:"function set_DAL(&$value){";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:37:"

Set function for an internal value
";s:5:"param";a:1:{i:0;a:2:{i:0;s:12:"unknown_type";i:1;s:6:"$value";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:32;s:13:"content_lines";i:3;s:6:"atLine";i:159;}i:23;a:7:{s:6:"header";s:20:"function &get_DAL(){";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:69:"

This returns an reference of the used data abstraction layer class
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:13:"cAbcoursesDAL";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:30;s:13:"content_lines";i:3;s:6:"atLine";i:168;}i:25;a:7:{s:6:"header";s:35:"function set_objCategorys($value) {";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:37:"

Set function for an internal value
";s:5:"param";a:1:{i:0;a:2:{i:0;s:12:"unknown_type";i:1;s:6:"$value";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:124;s:13:"content_lines";i:5;s:6:"atLine";i:178;}i:27;a:7:{s:6:"header";s:29:"function &get_objCategorys(){";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:112:"

Returns an reference of the internal cCategorys instance. If not available, the instance will be initialised.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:10:"cCategorys";i:1;s:29:"Returns 0 if an error occured";}}s:7:"content";s:0:"";s:12:"content_size";i:230;s:13:"content_lines";i:9;s:6:"atLine";i:189;}i:29;a:7:{s:6:"header";s:35:"function set_objLocations($value) {";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:37:"

Set function for an internal value
";s:5:"param";a:1:{i:0;a:2:{i:0;s:12:"unknown_type";i:1;s:6:"$value";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:40;s:13:"content_lines";i:3;s:6:"atLine";i:205;}i:31;a:7:{s:6:"header";s:30:"function &get_objLocations() {";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:112:"

Returns an reference of the internal cLocations instance. If not available, the instance will be initialised.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:10:"cLocations";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:155;s:13:"content_lines";i:9;s:6:"atLine";i:214;}i:33;a:7:{s:6:"header";s:32:"function set_arrCourses($value){";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:37:"

Set function for an internal value
";s:5:"param";a:1:{i:0;a:2:{i:0;s:12:"unknown_type";i:1;s:6:"$value";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:38;s:13:"content_lines";i:3;s:6:"atLine";i:230;}i:35;a:7:{s:6:"header";s:42:"function &get_Course($uid='',$eventId=''){";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:238:"

This returns a reference to a course instance, corresponding to the passed uid or eventId. If an eventId is passed, this will lookup the corresponding course an add the event to the internal event array of the returned course instance.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:98:"$uid	Id of the course you want to load. If an eventId is passed also, this value takes precedence.";}i:1;a:2:{i:0;s:7:"integer";i:1;s:37:"$eventId	Id of a corresponding event.";}}s:6:"return";a:2:{i:0;s:7:"cCourse";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:1184;s:13:"content_lines";i:36;s:6:"atLine";i:241;}i:37;a:7:{s:6:"header";s:26:"function &get_Event($uid){";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:67:"

Returns an instance of cEvent, corresponding to the passed $uid.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:43:"$uid	Uid of the event you want to return...";}}s:6:"return";a:2:{i:0;s:6:"cEvent";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:652;s:13:"content_lines";i:20;s:6:"atLine";i:284;}i:39;a:7:{s:6:"header";s:29:"function &get_Category($uid){";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:70:"

Returns an instance of cCategory, corresponding to the passed $uid.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:46:"$uid	Uid of the category you want to return...";}}s:6:"return";a:2:{i:0;s:9:"cCategory";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:594;s:13:"content_lines";i:18;s:6:"atLine";i:311;}i:41;a:7:{s:6:"header";s:49:"function &get_Trainer($trainerId='',$eventId=''){";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:81:"

Returns an instance of cTrainer, corresponding to the passed $uid or $eventId.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:45:"$trainerId Id of the trainer you want to get.";}i:1;a:2:{i:0;s:7:"integer";i:1;s:71:"$eventId Id of the event you want to get the corresponding trainer for.";}}s:6:"return";a:2:{i:0;s:8:"cTrainer";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:921;s:13:"content_lines";i:31;s:6:"atLine";i:337;}i:43;a:7:{s:6:"header";s:32:"function &get_Teachingaid($uid){";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:73:"

Returns an instance of cTeachingaid, corresponding to the passed $uid.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:58:"$uid	The uid of the record you want to get the object for.";}}s:6:"return";a:2:{i:0;s:12:"cTeachingaid";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:652;s:13:"content_lines";i:20;s:6:"atLine";i:375;}i:45;a:4:{s:6:"header";s:51:"function &get_Hotel($hotelId='',$arrangementId=''){";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:84:"

Returns an instance of cHotel, corresponding to a passed hotelId or arrangementId
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:121:"$hotelId	Id of the hotel record you want to get the object for. This takes precedence, if an arrangementId is passed too.";}i:1;a:2:{i:0;s:7:"integer";i:1;s:80:"$arrangementId	Id of an arrangement you want to get the corresponding hotel for.";}}s:6:"return";a:2:{i:0;s:6:"cHotel";i:1;s:0:"";}}s:6:"atLine";i:403;}i:47;a:7:{s:6:"header";s:32:"function &get_Arrangement($uid){";s:11:"parentClass";s:7:"cLoader";s:4:"cDat";a:3:{s:4:"text";s:57:"

Returns one instance of cArrangement with the given id
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:71:"$uid	: The id of the arrangement wich should be initialised an returned";}}s:6:"return";a:2:{i:0;s:12:"cArrangement";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:631;s:13:"content_lines";i:21;s:6:"atLine";i:455;}}}s:14:"MD5_745a85699d";a:4:{s:8:"filename";s:43:"pi1/classes/class.tx_abcourses.Location.php";s:8:"filesize";i:698;s:6:"header";N;s:3:"DAT";a:2:{i:1;a:5:{s:6:"header";s:39:"class cLocation extends cAbcoursesBase{";s:5:"class";i:1;s:11:"parentClass";s:9:"cLocation";s:4:"cDat";a:3:{s:4:"text";s:67:"

This class handles the location records of the abcourses plugin.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:6:"atLine";i:4;}i:3;a:7:{s:6:"header";s:50:"function loadData($byUid='',$byEventId='',&$DAL) {";s:11:"parentClass";s:9:"cLocation";s:4:"cDat";a:3:{s:4:"text";s:38:"

Load the data of a location record.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:7:"integer";i:1;s:42:"$byUid To load the data with a location id";}i:1;a:2:{i:0;s:7:"integer";i:1;s:58:"$byEventId To load the data with a corresponding event id.";}i:2;a:2:{i:0;s:13:"cAbcoursesDAL";i:1;s:44:"$DAL Reference to the used abstraction layer";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:182;s:13:"content_lines";i:8;s:6:"atLine";i:16;}}}s:14:"MD5_98893e9f42";a:4:{s:8:"filename";s:44:"pi1/classes/class.tx_abcourses.Locations.php";s:8:"filesize";i:1706;s:6:"header";N;s:3:"DAT";a:4:{i:1;a:8:{s:6:"header";s:41:"class cLocations extends cAbcoursesBase {";s:5:"class";i:1;s:11:"parentClass";s:10:"cLocations";s:4:"cDat";a:3:{s:4:"text";s:94:"

As like as cCategorys for category records this is a wrapper class for cLocation instances.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:96;s:13:"content_lines";i:6;s:6:"atLine";i:5;}i:3;a:7:{s:6:"header";s:22:"function init(&$DAL) {";s:11:"parentClass";s:10:"cLocations";s:4:"cDat";a:3:{s:4:"text";s:77:"

Initialise some class attributes and loads the internal location Id-Array.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:13:"cAbcoursesDAL";i:1;s:49:"$DAL Reference to the used data abstraction layer";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:167;s:13:"content_lines";i:6;s:6:"atLine";i:18;}i:5;a:4:{s:6:"header";s:21:"function loadData() {";s:11:"parentClass";s:10:"cLocations";s:4:"cDat";a:3:{s:4:"text";s:110:"

Initialise the cLocation instances for the location id's as contained in the internal array arrLocationIds.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:0:"";}}s:6:"atLine";i:30;}i:7;a:7:{s:6:"header";s:37:"function getLocationUidTitleArray() {";s:11:"parentClass";s:10:"cLocations";s:4:"cDat";a:3:{s:4:"text";s:92:"

Returns an Array with the id of a location as key and the title of the location as value.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:379;s:13:"content_lines";i:13;s:6:"atLine";i:48;}}}s:14:"MD5_46103ade61";a:4:{s:8:"filename";s:46:"pi1/classes/class.tx_abcourses.Participant.php";s:8:"filesize";i:54;s:6:"header";N;s:3:"DAT";a:1:{i:1;a:7:{s:6:"header";s:36:"class cParticipant extends cPerson {";s:5:"class";i:1;s:11:"parentClass";s:12:"cParticipant";s:7:"content";s:0:"";s:12:"content_size";i:6;s:13:"content_lines";i:2;s:6:"atLine";i:0;}}}s:14:"MD5_8adf918647";a:4:{s:8:"filename";s:41:"pi1/classes/class.tx_abcourses.Person.php";s:8:"filesize";i:107;s:6:"header";N;s:3:"DAT";a:1:{i:1;a:7:{s:6:"header";s:38:"class cPerson extends cAbcoursesBase {";s:5:"class";i:1;s:11:"parentClass";s:7:"cPerson";s:7:"content";s:0:"";s:12:"content_size";i:53;s:13:"content_lines";i:4;s:6:"atLine";i:0;}}}s:14:"MD5_f72e9e5636";a:4:{s:8:"filename";s:46:"pi1/classes/class.tx_abcourses.Teachingaid.php";s:8:"filesize";i:1270;s:6:"header";N;s:3:"DAT";a:3:{i:1;a:8:{s:6:"header";s:43:"class cTeachingaid extends cAbcoursesBase {";s:5:"class";i:1;s:11:"parentClass";s:12:"cTeachingaid";s:4:"cDat";a:3:{s:4:"text";s:71:"

This class handles the teaching-aid records of the abcourses plugin.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:50;s:13:"content_lines";i:3;s:6:"atLine";i:4;}i:3;a:4:{s:6:"header";s:44:"function loadData($teachingaidId='',&$DAL) {";s:11:"parentClass";s:12:"cTeachingaid";s:4:"cDat";a:3:{s:4:"text";s:80:"

Load the data of a teaching aid record depending on the passed teachingaidId.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:14:"$teachingaidId";}i:1;a:2:{i:0;s:13:"cAbcoursesDAL";i:1;s:49:"$DAL Reference to the used data abstraction layer";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:6:"atLine";i:15;}i:5;a:7:{s:6:"header";s:37:"function printme($template, &$view) {";s:11:"parentClass";s:12:"cTeachingaid";s:4:"cDat";a:3:{s:4:"text";s:81:"

This function render the view for this event, depending on the given template.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:48:"$template : The remplate for rendering the view.";}i:1;a:2:{i:0;s:6:"string";i:1;s:80:"&$cObj : A reference to the cObj of the pi1 class who wants to render this view.";}i:2;a:2:{i:0;s:6:"string";i:1;s:74:"$conf	: A snippet of TS configuration which should be used for this event.";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:274;s:13:"content_lines";i:11;s:6:"atLine";i:31;}}}s:14:"MD5_482959fb04";a:4:{s:8:"filename";s:42:"pi1/classes/class.tx_abcourses.Trainer.php";s:8:"filesize";i:1752;s:6:"header";N;s:3:"DAT";a:2:{i:1;a:4:{s:6:"header";s:32:"class cTrainer extends cPerson {";s:5:"class";i:1;s:11:"parentClass";s:8:"cTrainer";s:6:"atLine";i:7;}i:3;a:7:{s:6:"header";s:45:"function printme($template,&$view,$conf='') {";s:11:"parentClass";s:8:"cTrainer";s:4:"cDat";a:3:{s:4:"text";s:71:"

This renders the data of an trainer record with the passed template.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"string";i:1;s:39:"$template The template for this record.";}i:1;a:2:{i:0;s:6:"Object";i:1;s:56:"$view Usually a reference to the pi1 class of the plugin";}i:2;a:2:{i:0;s:5:"array";i:1;s:22:"$conf TS configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:20:"The rendered view...";}}s:7:"content";s:0:"";s:12:"content_size";i:1081;s:13:"content_lines";i:20;s:6:"atLine";i:23;}}}s:14:"MD5_5d8e486e9f";a:4:{s:8:"filename";s:38:"pi1/classes/class.tx_abcourses.dal.php";s:8:"filesize";i:35873;s:6:"header";a:5:{s:4:"text";s:590:"

Data access Layer for abcourses with Usage of the default MySQL Database. You can change this, if you want to connect the abcourses plugin with other applications.
Please consider, that this is only related to the front-end!
If you change this file, the records as entered in the back end of TYPO3 may not be shown with the FE plugin. May be it would be nice then, to disable the corresponding records in the BE.

Do not change parameters or return values of the cAbcoursesDAL functions. If you do this anyway, you have to change the pi1 class and may be any class in the classes folder.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:38:"@author	Stefan Precht <sprecht@gmx.de>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:30:"Stefan Precht <sprecht@gmx.de>";}}}s:3:"DAT";a:21:{i:1;a:7:{s:6:"header";s:42:"class cAbcoursesDAL extends tslib_pibase {";s:5:"class";i:1;s:11:"parentClass";s:13:"cAbcoursesDAL";s:7:"content";s:0:"";s:12:"content_size";i:138;s:13:"content_lines";i:8;s:6:"atLine";i:37;}i:3;a:7:{s:6:"header";s:46:"function init($conf,$pages,$recursive,&$cObj){";s:11:"parentClass";s:13:"cAbcoursesDAL";s:4:"cDat";a:3:{s:4:"text";s:98:"

This is to initalise the DAL. Passed variables are TYPO3 specific. Dont change this parameters.
";s:5:"param";a:4:{i:0;a:2:{i:0;s:5:"array";i:1;s:22:"$conf	TS configuration";}i:1;a:2:{i:0;s:6:"string";i:1;s:60:"$pages	List of page ids where seminar records could be saved";}i:2;a:2:{i:0;s:7:"integer";i:1;s:32:"$recursive	Level of nested pages";}i:3;a:2:{i:0;s:10:"tslib_conf";i:1;s:62:"$cObj	A reference to the tslib_cobj instance of the pi1 class.";}}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:139;s:13:"content_lines";i:6;s:6:"atLine";i:55;}i:5;a:7:{s:6:"header";s:18:"function reset() {";s:11:"parentClass";s:13:"cAbcoursesDAL";s:4:"cDat";a:3:{s:4:"text";s:47:"

Resets the error flag and the message array.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:204;s:13:"content_lines";i:8;s:6:"atLine";i:67;}i:7;a:7:{s:6:"header";s:26:"function listCategorys() {";s:11:"parentClass";s:13:"cAbcoursesDAL";s:4:"cDat";a:3:{s:4:"text";s:120:"

This function must return an array containing the unique id's of available categories. The id's should be of integer.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:89:"Must be in the format key => value where key is an counter and value the id of a category";}}s:7:"content";s:0:"";s:12:"content_size";i:971;s:13:"content_lines";i:29;s:6:"atLine";i:81;}i:9;a:7:{s:6:"header";s:49:"function loadCategory($byUid='',$byCourseId='') {";s:11:"parentClass";s:13:"cAbcoursesDAL";s:4:"cDat";a:3:{s:4:"text";s:137:"

This function must return an array containing the unique id of a category. This function must work with corresponding course id's too!
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:31:"$byUid Unique id of an category";}i:1;a:2:{i:0;s:7:"integer";i:1;s:34:"$byCourseId Unique id of an course";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:100:"Must be in the format fieldname => value where fieldname must be uid and value the id of a category.";}}s:7:"content";s:0:"";s:12:"content_size";i:1435;s:13:"content_lines";i:37;s:6:"atLine";i:118;}i:11;a:7:{s:6:"header";s:80:"function listCourses($byCategoryId='',$bySimilarTitle='', $expectCourseId = ''){";s:11:"parentClass";s:13:"cAbcoursesDAL";s:4:"cDat";a:3:{s:4:"text";s:107:"

This function must return a list of course id's. The course id's can be looked up with different values.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:7:"integer";i:1;s:70:"$byCategoryId An id of a category a course could be associated with...";}i:1;a:2:{i:0;s:6:"string";i:1;s:15:"$bySimilarTitle";}i:2;a:2:{i:0;s:7:"integer";i:1;s:15:"$expectCourseId";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:87:"Must be in the format key => value where key is an counter and value the id of a course";}}s:7:"content";s:0:"";s:12:"content_size";i:2607;s:13:"content_lines";i:55;s:6:"atLine";i:164;}i:13;a:7:{s:6:"header";s:62:"function listCoursesWithNextEvents($categoryId='',$counter=1){";s:11:"parentClass";s:13:"cAbcoursesDAL";s:4:"cDat";a:3:{s:4:"text";s:107:"

This function must return a list of course id's. The course id's can be looked up with different values.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:68:"$categoryId An id of a category a course could be associated with...";}i:1;a:2:{i:0;s:7:"integer";i:1;s:126:"$counter This is used as LIMIT value for the mysql statement an passed through the plugin TS configuration into this function.";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:87:"Must be in the format key => value where key is an counter and value the id of a course";}}s:7:"content";s:0:"";s:12:"content_size";i:1892;s:13:"content_lines";i:39;s:6:"atLine";i:227;}i:15;a:7:{s:6:"header";s:46:"function loadCourse($byUid='',$byEventId='') {";s:11:"parentClass";s:13:"cAbcoursesDAL";s:4:"cDat";a:3:{s:4:"text";s:301:"

This must return an array with all course data. The array must be an associatve array where the array key is the attribute name and the array value the attribute it self.
The array key must related to the default attribute names in the mysql db as delivered with the default abcourses installation.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:76:"$byUid The unique id of the course you would like to get the attributes for.";}i:1;a:2:{i:0;s:7:"integer";i:1;s:67:"$byEventId To get the the course id for the corresponding event id.";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:1641;s:13:"content_lines";i:47;s:6:"atLine";i:275;}i:17;a:7:{s:6:"header";s:55:"function listEvents($byCourseId='',$showeventsago = 0){";s:11:"parentClass";s:13:"cAbcoursesDAL";s:4:"cDat";a:3:{s:4:"text";s:44:"

Must return a list of related event id's.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:27:"$byCourseId Id of an course";}i:1;a:2:{i:0;s:7:"integer";i:1;s:132:"$showeventsago If you would like to receive expired events too, set this to an appropriate number of days an event may have expired.";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:25:"Array key only as counter";}}s:7:"content";s:0:"";s:12:"content_size";i:1526;s:13:"content_lines";i:41;s:6:"atLine";i:330;}i:19;a:7:{s:6:"header";s:62:"function listNextEventForCourse($courseId,$showeventsago = 0){";s:11:"parentClass";s:13:"cAbcoursesDAL";s:4:"cDat";a:3:{s:4:"text";s:73:"

This function returns the uid of the next array for a given course id.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:73:"$courseId The id of the course you would like to receive an event id for.";}i:1;a:2:{i:0;s:7:"integer";i:1;s:132:"$showeventsago If you would like to receive expired events too, set this to an appropriate number of days an event may have expired.";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:59:"The key is the attribute uid and the value the received id.";}}s:7:"content";s:0:"";s:12:"content_size";i:1801;s:13:"content_lines";i:49;s:6:"atLine";i:379;}i:21;a:7:{s:6:"header";s:33:"function loadEvent($eventId='') {";s:11:"parentClass";s:13:"cAbcoursesDAL";s:4:"cDat";a:3:{s:4:"text";s:182:"

Returns the data of an event as associative array.
The array keys must related to the default attribute names in the mysql db as delivered with the default abcourses installation.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:24:"$eventId Id of the event";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:919;s:13:"content_lines";i:31;s:6:"atLine";i:436;}i:23;a:7:{s:6:"header";s:26:"function listLocations() {";s:11:"parentClass";s:13:"cAbcoursesDAL";s:4:"cDat";a:3:{s:4:"text";s:64:"

Returns a list of the unique id's for all available loactions
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:25:"Array key only as counter";}}s:7:"content";s:0:"";s:12:"content_size";i:956;s:13:"content_lines";i:29;s:6:"atLine";i:473;}i:25;a:7:{s:6:"header";s:48:"function loadLocation($byUid='',$byEventId='') {";s:11:"parentClass";s:13:"cAbcoursesDAL";s:4:"cDat";a:3:{s:4:"text";s:307:"

Returns the data of an location as associative array. The array must be an associatve array where the array key is the attribute name and the array value the attribute it self.
The array key must related to the default attribute names in the mysql db as delivered with the default abcourses installation.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:53:"$byUid To load the location data with an location id.";}i:1;a:2:{i:0;s:7:"integer";i:1;s:99:"$byEventId To load the location data corresponding to an special event. Currently this is not used.";}}s:6:"return";a:2:{i:0;s:7:"unknown";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:1486;s:13:"content_lines";i:36;s:6:"atLine";i:511;}i:27;a:7:{s:6:"header";s:37:"function listTrainer($byCourseId=''){";s:11:"parentClass";s:13:"cAbcoursesDAL";s:4:"cDat";a:3:{s:4:"text";s:80:"

Returns a array with unique id's of trainers, associated to the given course.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:61:"$byCourseId Id of the course you want to get the trainers for";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:39:"The key of the array is only a counter.";}}s:7:"content";s:0:"";s:12:"content_size";i:1431;s:13:"content_lines";i:39;s:6:"atLine";i:554;}i:29;a:7:{s:6:"header";s:47:"function loadTrainer($byUid='',$byEventId='') {";s:11:"parentClass";s:13:"cAbcoursesDAL";s:4:"cDat";a:3:{s:4:"text";s:305:"

Returns the data of a trainer as associative array. The array must be an associatve array where the array key is the attribute name and the array value the attribute it self.
The array key must related to the default attribute names in the mysql db as delivered with the default abcourses installation.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:79:"$byUid Load the data for an given id of a trainer. This value takes precedence.";}i:1;a:2:{i:0;s:7:"integer";i:1;s:78:"$byEventId Load the data for the trainer which is associated with the eventId.";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:1641;s:13:"content_lines";i:45;s:6:"atLine";i:602;}i:31;a:7:{s:6:"header";s:46:"function listTeachingaidsForCourse($courseId){";s:11:"parentClass";s:13:"cAbcoursesDAL";s:4:"cDat";a:3:{s:4:"text";s:91:"

Returns an array with unique id's of teaching aids associated with the passed course id.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:72:"$courseId Id of the course you would like to load the teaching aids for.";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:49:"The key of this array is only used as an counter.";}}s:7:"content";s:0:"";s:12:"content_size";i:1348;s:13:"content_lines";i:40;s:6:"atLine";i:654;}i:33;a:7:{s:6:"header";s:34:"function loadTeachingaid($id='') {";s:11:"parentClass";s:13:"cAbcoursesDAL";s:4:"cDat";a:3:{s:4:"text";s:302:"

To load the whole data of a teaching aid record. The array must be an associatve array where the array key is the attribute name and the array value the attribute it self.
The array key must related to the default attribute names in the mysql db as delivered with the default abcourses installation.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:25:"$id Id of the teching aid";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:958;s:13:"content_lines";i:30;s:6:"atLine";i:702;}i:35;a:7:{s:6:"header";s:51:"function loadHotel($hotelId='',$arrangementId='') {";s:11:"parentClass";s:13:"cAbcoursesDAL";s:4:"cDat";a:3:{s:4:"text";s:295:"

To load the whole data of a hotel record. The array must be an associatve array where the array key is the attribute name and the array value the attribute it self.
The array key must related to the default attribute names in the mysql db as delivered with the default abcourses installation.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"integer";i:1;s:56:"$hotelId	To receive the data corresponding to a hotel id";}i:1;a:2:{i:0;s:7:"integer";i:1;s:68:"$arrangementId To receive the data corresponding to a arrangement id";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:1819;s:13:"content_lines";i:51;s:6:"atLine";i:741;}i:37;a:7:{s:6:"header";s:39:"function listArrangements($hotelId=''){";s:11:"parentClass";s:13:"cAbcoursesDAL";s:4:"cDat";a:3:{s:4:"text";s:89:"

Returns an array with unique id's of arrangement records, corresponding to a hotel id.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:8:"$hotelId";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:36:"Array key is only used as an counter";}}s:7:"content";s:0:"";s:12:"content_size";i:1386;s:13:"content_lines";i:40;s:6:"atLine";i:799;}i:39;a:4:{s:6:"header";s:47:"function listArrangementsForEvent($eventId=''){";s:11:"parentClass";s:13:"cAbcoursesDAL";s:4:"cDat";a:3:{s:4:"text";s:91:"

Returns an array with unique id's of arrangement records, corresponding to ann event id.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:8:"$eventId";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:36:"Array key is only used as an counter";}}s:6:"atLine";i:846;}i:41;a:7:{s:6:"header";s:34:"function loadArrangement($id='') {";s:11:"parentClass";s:13:"cAbcoursesDAL";s:4:"cDat";a:3:{s:4:"text";s:295:"

Load the whole data of an arrangement id. The array must be an associatve array where the array key is the attribute name and the array value the attribute it self.
The array key must related to the default attribute names in the mysql db as delivered with the default abcourses installation.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:3:"$id";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:827;s:13:"content_lines";i:29;s:6:"atLine";i:894;}}}}}