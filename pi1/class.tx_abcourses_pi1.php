<?php

/***************************************************************
 *  Copyright notice
 *
 *  (c) 2005 - 2014 Andreas Behrens (behrens@b-networks.de) and
 *                  Stefan Precht (info@stefanprecht.de)
 *
 *  All rights reserved
 *
 *  This script is part of the TYPO3 project. The TYPO3 project is
 *  free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  The GNU General Public License can be found at
 *  http://www.gnu.org/copyleft/gpl.html.
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/
/**
 * Plugin 'Courses' for the 'abcourses' extension.
 *
 * @author Andreas Behrens <behrens@b-networks.de>
 * @author Stefan Precht <info@stefanprecht.de>
 */

require_once(t3lib_extMgm::extPath('abcourses') . 'api/classes/class.tx_abcourses.classes.php');
require_once(t3lib_extMgm::extPath('abcourses') . 'api/util/class.tx_abcourses.utils.php');


class tx_abcourses_pi1 extends tslib_pibase
{
    var $prefixId = 'tx_abcourses_pi1'; // Same as class name
    var $scriptRelPath = 'pi1/class.tx_abcourses_pi1.php'; // Path to this script relative to the extension dir.
    var $extKey = 'abcourses'; // The extension key.

    var $theCode = ''; // Code zur Darstellung
    var $pages = ''; //pid für Datensätze
    var $recursive = '';
    var $eventToSubscribe = '';
    var $labelset = false;
    var $MALabels = array();
    var $INITEVENTS = true;
    var $DONOTINITEVENTS = 0; //This is like a constant. Do not change the value!
    var $template = '';
    var $templateNoData = '';
    var $forceCategoryList = 0;
    var $showConfigInfo = false;


    /**
     * Main event function: Decides by the given CODEs which of the
     * functions to display events should be called.
     *
     * @param    string $content : function output is added to this
     * @param    array $conf : configuration array
     * @return    string        $content: complete content generated by the tt_news plugin
     */
    function main($content, $conf)
    {
        //Initialize
        $this->init($conf);

        //Darstellungsmodus unterscheiden
        switch (strtoupper((string)$this->theCode)) {
            case "CATOVERVIEW":
                if (strtoupper($this->piVars['mode']) == strtoupper('courses') && !$this->forceCategoryList) { //Termine zu einer Kategorie
                    return $this->returnRenderedOutput($this->displayCoursesInCat($content, $conf));
                } else {
                    return $this->returnRenderedOutput($this->displayCatoverview($content, $conf));
                }
                break;
            case "QUICKSEARCH":
                return $this->returnRenderedOutput($this->displayQuicksearch($content, $conf));
                break;
            case "RESULTLIST":
                return $this->returnRenderedOutput($this->displayResultlist($content, $conf));
                break;
            case "DETAIL":
                return $this->returnRenderedOutput($this->displayDetail($content, $conf));
                break;
            case "SUBSCRIBE":
                return $this->returnRenderedOutput($this->displaySubscribe($content, $conf));
                break;
            case "CATOVERVIEWWITHCOURSE":
                return $this->returnRenderedOutput($this->displayCatoverviewWithNextEvents());
                break;
            case "SPECIALEVENTOVERVIEW":
                return $this->returnRenderedOutput($this->displaySelectedEvents());
                break;
            case "SPECIALCATOVERVIEW":
                return $this->returnRenderedOutput($this->displaySpecialCatOverview());
                break;
            default:
                return $this->returnRenderedOutput($this->displayHelp());
                break;
        }
    }

    /**
     * This receives the rendered output from an viewtype, wraps it in his base class,
     * substitutes the global marker array and optionally returns the configuration helper as well.
     *
     * @param String $content The rendered output.
     * @return unknown
     */
    function returnRenderedOutput($content)
    {
        $content = $this->pi_wrapInBaseClass(
            $this->cObj->substituteMarkerArrayCached(
                $content, $this->MALabels
            )
        );

        if ($this->showConfigInfo) {
            $content .= $this->displayConfigurationCheck();
        }

        return $content;
    }

    /**
     * Init function. Triggered by the main function. Initialise different values.
     *
     * @param    array $conf : configuration array
     * @return    void
     */
    function init($conf)
    {
        $this->conf = $conf; // Konfiguration übernehmen
        $this->pi_setPiVarDefaults(); // Standard piVars übernehmen

        $this->pi_initPIflexForm(); // Init FlexForm configuration for plugin

        $this->pi_loadLL(); // Loading the LOCAL_LANG values
        $this->pi_USER_INT_obj = 1; // Caching ist deaktiviert, wenn Flag gesetzt.

        $file = $this->pi_getFFvalue($this->cObj->data['pi_flexform'], 'field_template', 'sData');
        $file = ($file ? $file : $this->conf['template']);

        $this->template = $this->cObj->fileResource($file); // templatedatei beziehen
        $this->templateNoData = $this->cObj->getSubpart($this->template, '###TEMPLATENODATA###');
        if (!$this->templateNoData) $this->templateNoData = $this->pi_getLL('nodata');

        $GLOBALS['TSFE']->set_no_cache(); // Schalte den Cache für die Seite aus, auf der sich dieses PlugIn befindet
        $this->skillimagepath = $this->conf['skillimagepath'];
        $this->ratingimagepath = $this->conf['ratingimagepath'];

        $this->pages = $this->pi_getFFvalue($this->cObj->data['pi_flexform'], 'field_pages', 'sDEF');
        $this->recursive = $this->pi_getFFvalue($this->cObj->data['pi_flexform'], 'field_recursive', 'sDEF');
        $this->theCode = $this->pi_getFFvalue($this->cObj->data['pi_flexform'], 'field_view', 'sDEF');
        $this->eventToSubscribe = $this->pi_getFFvalue($this->cObj->data['pi_flexform'], 'field_directsubscription', 'sData');
        $this->forceCategoryList = $this->pi_getFFvalue($this->cObj->data['pi_flexform'], 'field_forceCategoryView', 'sData');
        $this->showConfigInfo = $this->pi_getFFvalue($this->cObj->data['pi_flexform'], 'field_showConfigInfo', 'sConfig');

        $this->pages = ($this->pages ? $this->pages : $this->conf["pidList"]);
        $this->recursive = ($this->recursive ? $this->recursive : $this->conf["recursive"]);
        $this->theCode = (is_numeric($this->theCode) ? $this->theCode : $this->conf["CMD"]);

        $GLOBALS['T3_VAR']['abcourses']['locale'] = $this->conf['locale'];
        $GLOBALS['T3_VAR']['abcourses']['offset'] = $this->conf['offset'];

        //ID's der Darstellungsmodi auflösen
        switch ((int)$this->theCode) {
            case 1:
                $this->theCode = "CATOVERVIEW";
                break;
            case 2:
                $this->theCode = "QUICKSEARCH";
                break;
            case 3:
                $this->theCode = "RESULTLIST";
                break;
            case 4:
                $this->theCode = "DETAIL";
                break;
            case 5:
                $this->theCode = "SUBSCRIBE";
                break;
            case 8:
                $this->theCode = "CATOVERVIEWWITHCOURSE";
                break;
            case 9:
                $this->theCode = "SPECIALEVENTOVERVIEW";
                break;
            case 10:
                $this->theCode = "SPECIALCATOVERVIEW";
                break;
            default:
                $this->theCode = "HELP";
                break;
        }

        //init the object layer if not already happened.
        if (!$GLOBALS['T3_VAR']['abcourses']['cLoader']) {
            $GLOBALS['T3_VAR']['abcourses']['cLoader'] =& t3lib_div::makeInstance('cLoader');
            $objLoader =& $GLOBALS['T3_VAR']['abcourses']['cLoader'];
            $objLoader->init($this->conf, $this->pages, $this->recursive, $this->cObj);
        }

        $this->fillAllLabels($this->MALabels);

        return;
    }

    /**
     * This is just to display some configuration values available on the current page.
     * You can activate this within the flexform configuration.
     */
    function displayConfigurationCheck()
    {
        $content = "<h2>Small configuration test for the abcourses course management.</h2><div>Please notice that this is just a basic test." .
            " It is up to you, that you configured your PlugIn correctly. This just takes a look if you have forgotten to configure something!</div>";

        // Test Data Source
        $content .= "<h4>Data Source</h4>";
        if (intval($this->conf['pidList'])) {
            $content .= "<div style=\"color:green;\">Default data source pid is: " . $this->conf['pidList'] . "</div>";
        } else {
            $content .= "<div style=\"color:red;\">You have not configured the pid where the plugin data records are stored. " .
                "So if you do not configure a pid for this within each plugin's FlexForm, no data can be found.</div>";
        }
        $content .= '<div style="font-style:italic;">Recursion depth is: ' . $this->conf['recursive'] . '</div>';


        //Is a template available?
        $file = $this->pi_getFFvalue($this->cObj->data['pi_flexform'], 'field_template', 'sData');
        $file = ($file ? $file : $this->conf['template']);
        $content .= "<h4>Template File</h4>";
        if ($this->template) {
            $content .= "<div style=\"color:green;\">A template was found at: " . $file . " </div>";
        } else {
            $content .= "<div style=\"color:red;\">There seems to be a problem with your template file.<br>Currently configured as template location: " .
                $file . "</div>";
        }

        //Is there a default categorie overview PlugIn?
        $content .= "<h4>Categorie overview</h4>";
        if (intval($this->conf['pidOverview'])) {
            $content .= "<div style=\"color:green;\">Your default cateorie overview should be available at pid " . $this->conf['pidOverview'] .
                "Courses displayed for this categorie are ordered by: " . $this->conf['sortingfieldcoursesincat'] . "</div>";
        } else {
            $content .= "<div style=\"color:red;\">You did not configured an default page with a categorie overview!</div>";
        }

        //Is there a default detail view
        $content .= "<h4>Detail view</h4>";
        if (intval($this->conf['pidCourseDetails'])) {
            $content .= "<div style=\"color:green;\">Your default detail view should be available at pid " . $this->conf['pidCourseDetails'] .
                "</div>";
        } else {
            $content .= "<div style=\"color:red;\">You did not configured an default detail view!</div>";
        }

        //Is there an subscription form?
        $content .= "<h4>Subscribe form</h4>";
        if (intval($this->conf['pidSubscribe'])) {
            $content .= "<div style=\"color:green;\">Your default subscription form should be available at pid " . $this->conf['pidSubscribe'] .
                "</div>";
        } else {
            $content .= "<div style=\"color:red;\">You did not configured an default subscription form! If you dont want to offer online subscriptions, this does not matter. But you shoud remove the links markers to the subscription view than.</div>";
        }

        //What is about the price calculation
        $content .= "<h4>Price calculation</h4>";
        $content .= "<div style=\"color:green;\">The price calculation configured for this page is as follows:<br>" .
            "Prices entered in the backend are entered " . ($this->conf['priceWithTax'] ? "WITH" : "WITHOUT") . " tax included.<br>" .
            "Tax value percentage used for calculation is: " . $this->conf['taxValue'] . "<br>" .
            "Currency label is set to: " . $this->conf['currency'] . "</div>";

        //What is about the date and time formatting
        $content .= "<h4>Date and time formatting</h4>";
        $content .= "<div style=\"color:green;\">This Plugin is configured " . ($this->conf['useUTC'] ? "" : "NOT") . " to use UTC date-time<br>";
        $content .= "Current date and output format is: " . AbcoursesUtil::getFormattedDate($this->conf['ddmmyy']) . "<br>";
        $content .= "Curent time and output format is:" . AbcoursesUtil::getFormattedDate($this->conf['hhmmss']) . "</div>";

        //Test the configuration
        $content .= "<h4>Search functions</h4>";
        if (intval($this->conf['pidResults'])) {
            $content .= "<div style=\"color:green;\">Your default search result plug in should be available at pid: " . $this->conf['pidResults'] .
                "<br>Current search fields are: " . $this->conf['searchcoursefields'] . "</div>";
        } else {
            $content .= "<div style=\"color:red;\">You have not configured a page id for the search results.</div>";
        }

        $content .= "<h4>Contingent Management</h4>";
        if (intval($this->conf['usecontingent'])) {
            $content .= "<div style=\"color:green;\">The contingent management for this plugin is enabled!</div>";
        } else {
            $content .= "<div style=\"color:red;\">This plugin does not matters about contingents!</div>";
        }

        $content .= "<h4>Subscription tracking</h4>";
        if (intval($this->conf['trackSubscriptionsAsRecords'])) {
            $content .= "<div style=\"color:green;\">Subscriptions will be stored and associated as tt_address records</div>";
        } else {
            $content .= "<div style=\"color:red;\">Subscriptions will be counted but not stored as records!</div>";
        }
        $storagePidsArr = $GLOBALS['TSFE']->getStorageSiterootPids();
        $pid = $storagePidsArr["_STORAGE_PID"];
        $content .= "<div style=\"color:red;\">Your configured storage pid is " . $pid . " !</div>";

        return $content;
    }

    /**
     * This renders a categorie overview.
     *
     * @param string $content
     * @param array $conf
     * @return string    : Returns an overview for categories
     */
    function displayCatoverview($content, $conf)
    {

        //Enable this to get some debug output
        $debugme = false;

        //Get the configuration and the template for this view
        $lConf = $this->conf['catoverview.']; // TS einlesen
        $lTemplate = $this->cObj->getSubpart($this->template, '###CATOVERVIEW###');
        $lRowsTemplate = $this->cObj->getSubpart($lTemplate, '###ROW###');
        $lColsTemplate = $this->cObj->getSubpart($lRowsTemplate, '###COL###');
        $lCategoryTemplate = $this->cObj->getSubpart($lColsTemplate, '###CATEGORY###');
        $lColsTemplateEmpty = $this->cObj->getSubpart($lRowsTemplate, '###COLEMPTY###');
        $lRowsTemplate = $this->cObj->substituteSubpart($lRowsTemplate, '###COLEMPTY###', '');

        $lImage = $lConf['catImage.'];
        $lCol = $lConf['cols'];
        $sRet = ''; //this contains the return value
        $sRows = ''; //contains the rendered rows
        $sCols = ''; //contains the rendered columns
        $sCategorys = ''; //contains the rendered categorys
        $sOE = ''; //switch for css classes used in rows.
        $i = 0; //Guess what! Right! A counter ;-)

        //load the objectlayer
        $objLoader =& $GLOBALS['T3_VAR']['abcourses']['cLoader'];
        //validate if there is an instance of cCategorys
        if (!$GLOBALS['T3_VAR']['abcourses']['cCategorys']) {
            $GLOBALS['T3_VAR']['abcourses']['cCategorys'] =& $objLoader->get_objCategorys();
        }
        $objCategorys =& $GLOBALS['T3_VAR']['abcourses']['cCategorys'];

        if (!is_array($objCategorys->get_arrData())) {
            return $this->templateNoData;
        }

        $MA = array();
        foreach ($objCategorys->get_arrData() as $categoryId => $Category) {
            //start a new row for each i == 0; This is true for the first iteration.
            if ($i == 0) {
                //TODO May be we could use here a value initialised in TS config
                if ($sOE == 'odd') {
                    $sOE = 'even';
                } else {
                    $sOE = 'odd';
                }
            }

            //render the view for the current category record
            $sCategory = $Category->printme($lCategoryTemplate, $this, $lConf);
            $sCols .= $this->cObj->substituteSubpart($lColsTemplate, '###CATEGORY###', $sCategory);

            $i += 1;
            //Zellen pro Zeile erreicht?
            if ($i == (int)$lCol) {
                $sRows .= $this->cObj->substituteSubpart($lRowsTemplate, '###COL###', $sCols); //Zeile erzeugen und anfügen
                $sRows = $this->cObj->substituteMarker($sRows, '###ODDEVEN###', $sOE);

                //some resets
                $sCols = '';
                $i = 0;
            }
        }

        if ($sCols != '') {
            while ($i <= (int)$lCol) {
                //leere Zeile rendern
                $sCols .= $lColsTemplateEmpty;
                $i++;
            }
            $sRows .= $this->cObj->substituteSubpart($lRowsTemplate, '###COL###', $sCols); //Zeile erzeugen und anfügen
            $sRows = $this->cObj->substituteMarker($sRows, '###ODDEVEN###', $sOE);
        }

        $sRet = $this->cObj->substituteSubpart($lTemplate, '###ROW###', $sRows); //Tabelle erzeugen, Rückgabewert setzen.
        return $sRet;
    }

    /**
     * This renders a categorie overview about manually selected categories.
     * Courses can be displayed too and so the events. Please think about the costs of the resulted querys for this viewtype.
     *
     * @return string    : Categorie and event overview.
     */
    function displaySpecialCatOverview()
    {

        //Get the configuration and the template for this view
        $lConf = $this->conf['specialcatoverview.']; // TS einlesen
        $showOnlyCoursesWithNextEvents = intval($lConf['showOnlyCoursesWithNextEvents']);
        $nextEventsToLoad = intval($lConf['nextEventsToLoad']);

        $doNotShowEventsAgo = 0;
        $doNotShowEventsInList = '';

        $lTemplateMain = $this->cObj->getSubpart($this->template, '###SPECIALCATOVERVIEW###'); //Get the main template for this view
        $lTemplateCategorys = $this->cObj->getSubpart($lTemplateMain, '###CATEGORYS###');
        $lTemplateCategory = $this->cObj->getSubpart($lTemplateCategorys, '###CATEGORY###');

        $selectedCategories = $this->pi_getFFvalue($this->cObj->data['pi_flexform'], 'field_selectedcategories', 'sData');
        $selectedCategories = (!$selectedCategories ? $lConf['selectedCategories'] : $selectedCategories);
        $selectedCategories = explode(",", $selectedCategories);

        //load the objectlayer
        $objLoader =& $GLOBALS['T3_VAR']['abcourses']['cLoader'];

        //get the categorys object. this should be already initialised.
        $objCategorys =& $objLoader->get_objCategorys();

        $MA = array();
        $renderedCategorys = "";

        if (!is_array($objCategorys->get_arrData()) || !is_array($selectedCategories)) {
            return $this->templateNoData;
        }

        foreach ($objCategorys->get_arrData() as $categoryId => $Category) {

            if (in_array($categoryId, $selectedCategories)) {
                //render the view for the current category record
                $Category->load_arrCourses($objLoader, $showOnlyCoursesWithNextEvents, $this->DONOTINITEVENTS);
                $arrCourses =& $Category->get_arrCourses();
                if (is_array($arrCourses)) {
                    foreach ($arrCourses as $key => $value) {
                        $Course = $arrCourses[$key];
                        $Course->load_arrEvents($objLoader, $doNotShowEventsAgo, $doNotShowEventsInList, $nextEventsToLoad);
                    }
                }
                $renderedCategorys .= $Category->printme($lTemplateCategory, $this, $lConf);
            }

        }

        return $this->cObj->substituteSubpart($lTemplateMain, '###CATEGORYS###', $renderedCategorys);

    }

    /**
     * This renders a categorie overview with informations about the next events of courses assigned to a categorie.
     *
     * @return string    : Categorie and event overview.
     */
    function displayCatoverviewWithNextEvents()
    {

        //Get the configuration and the template for this view
        $lConf = $this->conf['catoverviewwithnextevents.']; // TS einlesen
        $lTemplateMain = $this->cObj->getSubpart($this->template, '###CATOVERVIEWWITHNEXTEVENTS###'); //Get the main template for this view
        $lTemplateCategorys = $this->cObj->getSubpart($lTemplateMain, '###CATEGORYS###'); //Get the main template for this view
        $lTemplateCategory = $this->cObj->getSubpart($lTemplateCategorys, '###CATEGORY###'); //Get the main template for this view

        //load the objectlayer
        $objLoader =& $GLOBALS['T3_VAR']['abcourses']['cLoader'];

        //get the categorys object. this should be already initialised.
        $objCategorys =& $objLoader->get_objCategorys();

        $MA = array();
        $renderedCategorys = "";

        if (!is_array($objCategorys->get_arrData())) {
            return $this->templateNoData;
        }

        foreach ($objCategorys->get_arrData() as $categoryId => $Category) {
            //render the view for the current category record
            $Category->load_arrCourses($objLoader, $lConf['nextevents'], $this->INITEVENTS);
            $renderedCategorys .= $Category->printme($lTemplateCategory, $this, $lConf);
        }

        return $this->cObj->substituteSubpart($lTemplateMain, '###CATEGORYS###', $renderedCategorys);

    }

    /**
     * This renders an overview of selected events and their courses.
     *
     * @return string    : Course/event overview.
     */
    function displaySelectedEvents()
    {
        //Get the configuration and the template for this view
        $lConf = $this->conf['selectedevents.'];
        $lTemplateMain = $this->cObj->getSubpart($this->template, '###SELECTEDEVENTS###');
        $lTemplateCourses = $this->cObj->getSubpart($lTemplateMain, '###COURSES###');
        $lTemplateCourse = $this->cObj->getSubpart($lTemplateCourses, '###COURSE###');
        $lTemplateNoData = $this->cObj->getSubpart($lTemplateMain, '###NODATA###');
        $lTemplateMain = $this->cObj->substituteSubpart($lTemplateMain, '###NODATA###', '');

        //load the objectlayer
        $objLoader =& $GLOBALS['T3_VAR']['abcourses']['cLoader'];

        $asLastMinuteView = $this->pi_getFFvalue($this->cObj->data['pi_flexform'], 'field_asLastMinuteView', 'sData');
        $asLastMinuteView = (!$asLastMinuteView && $lConf['asLastMinuteView'] ? true : $asLastMinuteView);

        $maxNEvents = $this->pi_getFFvalue($this->cObj->data['pi_flexform'], 'field_maxNEvents', 'sData');
        $maxNEvents = (!$maxNEvents && $lConf['maxNEvents'] ? intval($lConf['maxNEvents']) : $maxNEvents);

        $selectedEvents = '';

        if (!$asLastMinuteView) {
            $selectedEvents = $this->pi_getFFvalue($this->cObj->data['pi_flexform'], 'field_selectedevents', 'sData');
            $selectedEvents = (!$selectedEvents ? $lConf['selectedEvents'] : $selectedEvents);
            if ($selectedEvents != '') {
                $selectedEvents = explode(",", $selectedEvents);
            }
        } else {
            $selectedEvents = $objLoader->listLastMinuteEvents($lConf['showEventsAgo'], $maxNEvents);
        }

        if (!$selectedEvents || !(is_array($selectedEvents)) || count($selectedEvents) == 0) {
            return $this->cObj->substituteSubpart($lTemplateMain, '###COURSES###', $lTemplateNoData);
        }


        foreach ($selectedEvents as $key => $eventId) {
            //Initialise the course the current event relates to
            $objLoader->load_arrCourses('', $eventId);

            //Initialize the corresponding event
            $Event =& $objLoader->get_Event($eventId);

            if ($Event != 0) {
                //If $event is 0, it was not possible to receive the event Object. Maybe the event is deleted.
                $Event->loadLocation($objLoader);
            }
        }

        //reset the courses array
        reset($objLoader->arrCourses);

        $cols = '';
        $courses = '';
        $i = 0;

        while (list($key, $objCourse) = each($objLoader->arrCourses)) {
            if ($objCourse->countEvents() > 0) {
                $objCourse->load_arrTrainer($objLoader);
                $i++;
                $courses .= $objCourse->printme($lTemplateCourse, $this, $lConf['course.']);
                if ($i >= intval($lConf['cols'])) {
                    $cols .= $this->cObj->substituteSubpart($lTemplateCourses, '###COURSE###', $courses);
                    $courses = '';
                    $i = 0;
                }
            }
        }
        if ($courses != '') {
            $cols .= $this->cObj->substituteSubpart($lTemplateCourses, '###COURSE###', $courses);
            $courses = '';
        }

        return $this->cObj->substituteSubpart($lTemplateMain, '###COURSES###', $cols);

    }


    /**
     * This returns an view of all courses assigned to a categorie.
     *
     * @param unknown_type $content
     * @param unknown_type $conf
     * @return string    The rendered view
     */
    function displayCoursesInCat($content, $conf)
    {
        //Get the configuration and the template for this view
        $lConf = $this->conf['coursesincat.']; //get the corresponding ts.
        $lConfCategory = $lConf['category.'];
        $initevents = (intval($lConf['initevents']) ? 1 : 0);
        $lTemplateMain = $this->cObj->getSubpart($this->template, '###COURSESINCAT###'); //Get the main template for this view
        $lTemplateCategory = $this->cObj->getSubpart($lTemplateMain, '###CATEGORY###'); //Get the main template for this view

        //load the objectlayer
        $objLoader =& $GLOBALS['T3_VAR']['abcourses']['cLoader'];

        //get the requested category.
        $Category =& $objLoader->get_Category(intval($this->piVars['catId']));
        if (!$Category) return $this->templateNoData;

        $Category->load_arrCourses($objLoader, 0, $initevents);
        $renderedCategory = $Category->printme($lTemplateCategory, $this, $lConfCategory);

        return $this->cObj->substituteSubpart($lTemplateMain, '###CATEGORY###', $renderedCategory);
    }


    function displayQuicksearch($content, $conf)
    {
        $lTemplate = $this->cObj->getSubpart($this->template, '###QUICKSEARCH###'); // Gesamttemplate extrahieren
        $MA = array();
        $MA['###PATHSEARCHRESULT###'] = $this->pi_getPageLink($this->conf['pidResults']);
        $MA['###LABELSUBMIT###'] = $this->pi_getLL('labelsubmitsearch', 'Search');
        $lTemplate = $this->cObj->substituteMarkerArray($lTemplate, $MA);

        return $lTemplate;
    }

    function displayResultlist($content, $conf)
    {

        $lTemplate = $this->cObj->getSubpart($this->template, '###SEARCHRESULT###');
        $lTemplateCourses = $this->cObj->getSubpart($lTemplate, '###COURSES###');
        $lTemplateCourse = $this->cObj->getSubpart($lTemplateCourses, '###COURSE###');
        $lNoTemplate = $this->cObj->getSubpart($lTemplate, '###NOSEARCHRESULT###'); // Gesamttemplate extrahieren

        $result = '';
        $sWord = '';

        if (strlen(t3lib_div::_GP('sword')) > 0) {
            $sWord = t3lib_div::_GP('sword');
        } elseif (strlen(t3lib_div::_GP('tx_indexedsearch[sword]')) > 0) {
            $sWord = t3lib_div::_GP('tx_indexedsearch[sword]');
        }

        if ($sWord) {
            $result = $this->searchCourse($sWord);
        } else {
            return $lNoTemplate;
        }

        if ($result && ($GLOBALS['TYPO3_DB']->sql_num_rows($result) >= 1)) {
            //load the objectlayer
            $objLoader =& $GLOBALS['T3_VAR']['abcourses']['cLoader'];
            $renderedCourses = '';
            while ($course = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($result)) {
                //please consider that the field "uid" is mandatory
                $Course = $objLoader->get_Course($course['tx_abcourses_course_uid']);
                $renderedCourses .= $Course->printme($lTemplateCourse, $this, $conf['course.']);
            }
            $lTemplateCourses = $this->cObj->substituteSubpart($lTemplateCourses, '###COURSE###', $renderedCourses);
            $lTemplate = $this->cObj->substituteSubpart($lTemplate, '###COURSES###', $lTemplateCourses);
            $lTemplate = $this->cObj->substituteSubpart($lTemplate, '###NOSEARCHRESULT###', '');

        } else {
            $lTemplate = $lNoTemplate;
        }

        return $lTemplate;
    }

    function displayDetail($content, $conf)
    {
        $debugme = false;

        //Check if this page should be redirected.
        if ($this->conf['redirectDetailPage'] && $this->piVars['courseId'] && intval($GLOBALS['TSFE']->id) == intval($this->conf['redirectDetailPageId'])) {
            $rsRedUrl = '';
            $rsRedUrl = $GLOBALS['TYPO3_DB']->exec_SELECTquery('content', 'tx_realurl_urlencodecache', 'tx_realurl_urlencodecache.origparams like "%[courseId]=' . intval($this->piVars['courseId']) . '"');
            if (!$GLOBALS['TYPO3_DB']->sql_error()) {
                if ($rsRedUrl && $GLOBALS['TYPO3_DB']->sql_num_rows($rsRedUrl) >= 1) {
                    if ($rsContent = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($rsRedUrl)) {
                        $url = trim($this->conf['redirectToDomain']) . trim($rsContent['content']);
                        header("HTTP/1.1 301 Moved Permanently");
                        header("Location: " . $url);
                        die();
                    }
                }
            }
        }


        //Variablen initialisieren
        $lConf = $this->conf['coursedetail.']; // TS einlesen

        $lTemplate = $this->cObj->getSubpart($this->template, '###COURSEDETAIL###'); // Gesamttemplate extrahieren

        $lEventtemplate = $this->cObj->getSubpart($lTemplate, '###EVENT###'); // Subpart extrahieren
        $lEventtemplateRow = $this->cObj->getSubpart($lEventtemplate, '###ROWEVENT###'); // Subpart extrahieren
        $lEventtemplateCol = $this->cObj->getSubpart($lEventtemplateRow, '###COLEVENT###'); // Subpart extrahieren
        $lEventtemplateColEmpty = $this->cObj->getSubpart($lEventtemplateRow, '###COLEMPTY###'); //Leerzeile löschen
        $lNoEventtemplate = $this->cObj->getSubpart($lTemplate, '###NOEVENT###'); // Subpart extrahieren

        $lSimilartemplate = $this->cObj->getSubpart($lTemplate, '###SIMILAREVENTS###'); // Subpart extrahieren
        $lSimilarRow = $this->cObj->getSubpart($lSimilartemplate, '###SIMILAREVENTSROW###'); // Subpart extrahieren
        $lNoSimilar = $this->cObj->getSubpart($lTemplate, '###NOSIMILAREVENTS###'); // Subpart extrahieren

        $lConditionstemplate = $this->cObj->getSubpart($lTemplate, '###CONDITIONS###'); // Subpart extrahieren
        $lNoConditionstemplate = $this->cObj->getSubpart($lTemplate, '###NOCONDITIONS###'); // Subpart extrahieren

        $lTrainertemplate = $this->cObj->getSubpart($lTemplate, '###TRAINER###'); // Subpart extrahieren
        $lTrainertemplateRow = $this->cObj->getSubpart($lTrainertemplate, '###ROWTRAINER###'); // Subpart extrahieren
        $lNoTrainertemplate = $this->cObj->getSubpart($lTemplate, '###NOTRAINER###'); // Subpart extrahieren

        $lParticipantstemplate = $this->cObj->getSubpart($lTemplate, '###PARTICIPANTS###'); // Subpart extrahieren
        $lParticipantstemplate = $this->cObj->getSubpart($lTemplate, '###NOPARTICIPANTS###'); // Subpart extrahieren

        $lEventTrainertemplate = $this->cObj->getSubpart($lEventtemplate, '###EVENTTRAINER###'); // Subpart extrahieren
        $lEventTrainertemplateRow = $this->cObj->getSubpart($lTrainertemplate, '###EVENTROWTRAINER###'); // Subpart extrahieren
        $lEventNoTrainertemplate = $this->cObj->getSubpart($lEventtemplate, '###EVENTNOTRAINER###'); // Subpart extrahieren

        $lPagetemplate = $this->cObj->getSubpart($lEventtemplate, '###PAGE###'); // Subpart extrahieren
        $lPagetemplateRow = $this->cObj->getSubpart($lPagetemplate, '###ROWPAGE###'); // Subpart extrahieren
        $lNoPagetemplate = $this->cObj->getSubpart($lEventtemplate, '###NOPAGE###'); // Subpart extrahieren

        $templateTeachingaids = $this->cObj->getSubpart($lTemplate, '###TEACHINGAIDS###');
        $templateFiles = $this->cObj->getSubpart($lTemplate, '###FILES###');


        $sRet = ''; // Variable für Ausgabe

        //Übergabeparameter prüfen
        if (!isset($this->piVars['courseId'])) {
            return $this->templateNoData;
        }

        $objLoader =& $GLOBALS['T3_VAR']['abcourses']['cLoader'];

        //+++++++++++++++++++++++++
        //Daten des Kurses abfragen
        //+++++++++++++++++++++++++
        $objCourse = & $objLoader->get_Course(intval($this->piVars['courseId']));
        $foo = ($debugme ? debug($objCourse) : '');

        //is an course instance available?
        if (!$objCourse || $objCourse->fError) {
            return $this->templateNoData;
        }

        //Load the teaching aids
        $objCourse->load_arrTeachingaids($objLoader);
        $teachingaids = '';

        if ($objCourse->countTeachingaids() && $templateTeachingaids) {
            $templateTeachingaid = $this->cObj->getSubpart($templateTeachingaids, '###TEACHINGAID###');
            $teachingaid = '';
            reset($objCourse->arrTeachingaids);
            while (list($id, $Teachingaid) = each($objCourse->arrTeachingaids)) {
                $teachingaid .= $Teachingaid->printme($templateTeachingaid, $this);
            }
            $teachingaids = $this->cObj->substituteSubpart($templateTeachingaids, '###TEACHINGAID###', $teachingaid);
        }
        $lTemplate = $this->cObj->substituteSubpart($lTemplate, '###TEACHINGAIDS###', $teachingaids);

        //Load the Download-Files
        $filenames = $objCourse->getSingleData("files");
        $files = '';
        $file = '';

        if ($filenames && $templateFiles) {
            $fileTemplate = $this->cObj->getSubpart($templateFiles, '###FILE###');
            $filenames = explode(",", $filenames);
            foreach ($filenames as $id => $filename) {
                $dlimage = $this->conf['dlimage_' . substr($filename, strlen($filename) - 3)];
                $dlimage = ($dlimage ? $dlimage : $this->conf['dlimage']);
                $MAFile['###DOWNLOADLINK###'] = "<a href=\"/" . $this->conf['uploaddir'] . $filename . "\" title=\"Download-Link\">" . $filename . "</a>";
                $MAFile['###DOWNLOADLINKIMAGE###'] = "<a href=\"/" . $this->conf['uploaddir'] . $filename . "\" title=\"Download-Link\"><img src=\"" . $dlimage . "\" border=\"0\" alt=\"Download " . $filename . "\"/></a>";
                $file .= $this->cObj->substituteMarkerArray($fileTemplate, $MAFile);
            }
            $files = $this->cObj->substituteSubpart($templateFiles, '###FILE###', $file);
        }
        $lTemplate = $this->cObj->substituteSubpart($lTemplate, '###FILES###', $files);


        //Markerarray initialisieren, wenn Daten vorhanden.
        $MACourse = array();

        //Daten (Kurs) in Variablen übernehmen
        $course = $objCourse->get_arrData();

        //Daten (Kurs) in MA übernehmen
        $this->fillCourseMA($MACourse, $lConf, $course);

        //Direkt übernommen
        $sNumber = $course['number'];
        $sTitle = $course['title'];
        $sSubtitle = $course['subtitle'];
        $sTeaser = $course['teaser'];
        $sDescription = $course['description'];
        $sEdupoints = $course['edupoints'];
        $sDays = $course['days'];
        $sCondition = $course['conditions'];
        $sCost = $course['cost'];
        $sCourseId = $course['uid'];

        //Für nachfolgende Abfragen
        $refIdPages = $course['pages'];

        unset($course);
        unset($rsCourse);


        //+++++++++++++++++++++++++++++++++++++
        //Relative Daten der Kategorie abfragen
        //+++++++++++++++++++++++++++++++++++++

        $this->fillCategorieMA($MACourse, $lConf, '', '', intval($sCourseId));

        //++++++++++++++++++++++++++++++++
        //Relative Daten des Typs abfragen
        //++++++++++++++++++++++++++++++++

        $rsType = '';
        $rsType = $GLOBALS['TYPO3_DB']->exec_SELECT_mm_query(
            'tx_abcourses_type.typename AS typename',
            'tx_abcourses_course',
            'tx_abcourses_course_type_mm',
            'tx_abcourses_type',
            'AND tx_abcourses_type.pid IN (' . $this->pi_getPidList(
                $this->pages,
                $this->conf["recursive"]
            ) . ')' . $this->cObj->enableFields('tx_abcourses_type') .
            'AND tx_abcourses_course_type_mm.uid_local = ' . intval($sCourseId) . '
    						 AND tx_abcourses_type.uid = tx_abcourses_course_type_mm.uid_foreign'
        );


        if ($type = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($rsType)) {
            $MACourse['###TYPE###'] = $this->cObj->stdWrap($type['typename'], $lConf['typeWrap.']);
        } else {
            $MACourse['###TYPE###'] = '';
        }

        unset($rsType);
        unset($type);

        //+++++++++++++++++++++++++++++++++++
        //Relative Daten der Trainer abfragen
        //+++++++++++++++++++++++++++++++++++

        //TODO Change this to the oop approach...

        $rsTrainer = '';
        $rsTrainer = $GLOBALS['TYPO3_DB']->exec_SELECT_mm_query(
            'tt_address.*',
            'tx_abcourses_course',
            'tx_abcourses_course_trainers_mm',
            'tt_address',
            'AND tt_address.pid IN (' . $this->pi_getPidList(
                $this->pages,
                $this->conf["recursive"]
            ) . ')' . $this->cObj->enableFields('tt_address') . '
    						 AND tx_abcourses_course_trainers_mm.uid_local = ' . intval($sCourseId),
            '',
            'tx_abcourses_course_trainers_mm.sorting'
        );

        $MATrainer = ''; // MA für Trainerdaten
        $sRowsTrainer = ''; //Die einzelnen Zeilen im Subpart Row vom Template Trainer

        while ($trainer = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($rsTrainer)) {
            $MATrainer = array();
            $this->fillTrainerMA($MATrainer, $lConf, $trainer);
            $sRowsTrainer .= $this->cObj->substituteMarkerArray($lTrainertemplateRow, $MATrainer);
        }

        if ($sRowsTrainer) {
            //Erstellte Zeilen in das Trainertemplate übernehmen
            $lTrainertemplate = $this->cObj->substituteSubpart($lTrainertemplate, '###ROWTRAINER###', $sRowsTrainer);
        } else {
            //Wenn keine Trainer gefunden wurden, Template nicht rendern.
            $lTrainertemplate = $lNoTrainertemplate;
        }

        unset($rsTrainer);
        unset($trainer);
        unset($sRowsTrainer);

        //+++++++++++++++++++++++++++++++++++
        //Relative Daten der Termine abfragen
        //+++++++++++++++++++++++++++++++++++

        //TODO Change this to the oop approach

        //Filter für Termine setzen. Termin darf $ago Tage zurückliegen.
        $datefilter = '';
        $ago = intval($lConf['showEventsAgo']);
        $time = time() - ($ago * 24 * 3600);
        $datefilter = ' AND tx_abcourses_event.coursestart >= ' . mktime(0, 0, 0, date('m', $time), date('d', $time), date('Y', $time));

        $rsEvents = '';
        $rsEvents = $GLOBALS['TYPO3_DB']->exec_SELECT_mm_query(
            'tx_abcourses_event.*',
            'tx_abcourses_event',
            'tx_abcourses_event_course_mm',
            'tx_abcourses_course',
            'AND tx_abcourses_event.pid IN (' . $this->pi_getPidList(
                $this->pages,
                $this->conf["recursive"]
            ) . ')' . $this->cObj->enableFields('tx_abcourses_event') . '
    				     AND tx_abcourses_event_course_mm.uid_foreign = ' . intval($sCourseId) . '
    				     AND tx_abcourses_event.uid = tx_abcourses_event_course_mm.uid_local' . $datefilter,
            '',
            'tx_abcourses_event.coursestart, tx_abcourses_event.firstdaytimestart'
        );

        $i = 0;
        $sOE = '';
        $MAEventCol = array();
        $sEventCol = '';
        $sEventRow = '';

        while ($event = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($rsEvents)) {
            //wenn i == 0, dann neue Zeile | Beim ersten Durchlauf immer wahr
            if ($i == 0) {
                if ($sOE == 'odd') { //Zeilenschalter für Klassendefinition
                    $sOE = 'even';
                } else {
                    $sOE = 'odd';
                }
            }

            //MA befüllen.
            $this->fillEventMA($MAEventCol, $lConf, $sCost, $event);
            //Daten des Veranstaltungsortes hinzufügen.
            $this->fillLocationMA($MAEventCol, $lConf, '', '', $event['uid']);

            //Daten des Trainers hinzufügen
            $this->fillTrainerMA($MAEventCol, $lConf, '', '', $event['uid']);

            //Zellen in Template ersetzen
            $sEventCol .= $this->cObj->substituteMarkerArrayCached($lEventtemplateCol, $MAEventCol);
            $i++;

            //Zellen pro Zeile erreicht?
            if ($i == (int)$lConf['eventcols']) {
                //Zeile rendern
                $sEventRow .= $this->cObj->substituteSubpart($lEventtemplateRow, '###COLEVENT###', $sEventCol);
                $sEventRow = $this->cObj->substituteMarker($sEventRow, '###ODDEVEN###', $sOE);

                $sEventCol = ''; //Zellen zurücksetzen
                $i = 0; //Zähler zurücksetzen
            }
        }

        if ($sEventCol != '') {
            while ($i <= (int)$lConf['eventcols']) {
                //leere Zeile rendern
                $sEventCol .= $lEventtemplateColEmpty;
                $i++;
            }
            $sEventRow .= $this->cObj->substituteSubpart($lEventtemplateRow, '###COLEVENT###', $sEventCol);
            $sEventRow = $this->cObj->substituteMarker($sEventRow, '###ODDEVEN###', $sOE);
        }
        if ($debugme) {
            debug('EventCol:' . $sEventCol);
        }
        if ($debugme) {
            debug('EventRow:' . $sEventRow);
        }
        if ($debugme) {
            debug('EventtemplateRow:' . $lEventtemplateRow);
        }

        //Zeilentemplate überschreiben mit gerenderten Zeilen
        $lEventtemplateRow = $sEventRow;

        if ($sEventRow) {
            //Eventtemplate überschreiben mit gerenderten Events
            $lEventtemplate = $this->cObj->substituteSubpart($lEventtemplate, '###ROWEVENT###', $lEventtemplateRow);
        } else {
            $lEventtemplate = $lNoEventtemplate;
        }

        unset($rsEvents);
        unset($event);
        unset($sEventCol);
        unset($sEventRow);


        //++++++++++++++++++++++++++++++++++
        //Relative Daten der Seiten abfragen
        //++++++++++++++++++++++++++++++++++

        $rsPages = '';
        if ($refIdPages) {
            $rsPages = $GLOBALS['TYPO3_DB']->exec_SELECTquery(
                'pages.uid,pages.title,pages.subtitle',
                'pages',
                'pages.uid IN (' . $refIdPages . ')' . $this->cObj->enableFields('pages')
            );
            $sPageRow = '';
            $MAPages = array();
            while ($pages = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($rsPages)) {
                $MAPages['###PAGETITLE###'] = $this->cObj->stdWrap(
                    $this->pi_LinkToPage($pages['title'], $pages['uid'])
                    , $lConf['pageTitleWrap.']);
                $MAPages['###PAGESUBTITLE###'] = $this->cObj->stdWrap($pages['subtitle'], $lConf['pageSubtitleWrap.']);
                $MAPages['###PAGELINK###'] = $this->cObj->stdWrap(
                    $this->pi_LinkToPage($this->pi_getLL('pagelinklabel'), $pages['uid'])
                    , $lConf['pageLinkWrap.']);
                $sPageRow .= $this->cObj->substituteMarkerArray($lPagetemplateRow, $MAPages);
            }
        }

        if (isset($pages)) {
            //Eventtemplate überschreiben mit gerenderten Events
            $lPagetemplate = $this->cObj->substituteSubpart($lPagetemplate, '###ROWPAGE###', $sPageRow);
        } else {
            $lPagetemplate = $lNoPagetemplate;
        }

        unset($rsPages);
        unset($pages);
        unset($sPageRow);
        unset($MAPages);


        //++++++++++++++++++++++++++++++++++++++++++++
        //Relative Daten vorhergehender Kurse abfragen
        //++++++++++++++++++++++++++++++++++++++++++++

        $objCourse->load_arrConditions($objLoader);

        if ($objCourse->countConditions() && $lConditionstemplate) {

            $templateConditionalCourse = $this->cObj->getSubpart($lConditionstemplate, '###COURSE###');
            $condition = '';
            reset($objCourse->arrConditions);
            while (list($id, $conditionalCourse) = each($objCourse->arrConditions)) {
                $condition .= $conditionalCourse->printme($templateConditionalCourse, $this, $lConf['conditionalCourse.']);
            }
            $lConditionstemplate = $this->cObj->substituteSubpart($lConditionstemplate, '###COURSE###', $condition);
        } else {
            $lConditionstemplate = $lNoConditionstemplate;
        }


        //+++++++++++++++++++++++++++++++++++++++++++++++
        //Ähnliche Kurse abfragen++++++++++++++++++++++++
        //+++++++++++++++++++++++++++++++++++++++++++++++

        $arrSimCourses = $objLoader->listSimilarCourses($objCourse->arrData['title'], $objCourse->arrData['uid']);

        if (is_array($arrSimCourses)) {
            $lSimilar = '';
            foreach ($arrSimCourses as $count => $thisid) {
                if ($thisid != $objCourse->arrData['uid']) {
                    $MASIM = Array();
                    $objThisCourse = & $objLoader->get_Course($thisid);

                    //Daten (Kurs) in Variablen übernehmen
                    $thiscourse = $objThisCourse->get_arrData();
                    $foo = ($debugme ? debug($objThisCourse) : '');

                    //Daten (Kurs) in MA übernehmen
                    $this->fillCourseMA($MASIM, $lConf, $thiscourse);
                    $lSimilar .= $lSimilarRow;
                    $lSimilar = $this->cObj->substituteMarkerArray($lSimilar, $MASIM);

                    unset($objThisCourse);
                }
            }
            $lSimilartemplate = $this->cObj->substituteSubPart($lSimilartemplate, '###SIMILAREVENTSROW###', $lSimilar);
            $this->fillSimilarMa($MACourse, $lConf);
        } else {
            $lSimilartemplate = $lNoSimilar;
            $this->fillSimilarMa($MACourse, $lConf, 1);
        }


        //Templates zusammenführen

        $sRet = $this->cObj->substituteSubPart($lTemplate, '###EVENT###', $lEventtemplate);
        $sRet = $this->cObj->substituteSubPart($sRet, '###CONDITIONS###', $lConditionstemplate);
        $sRet = $this->cObj->substituteSubPart($sRet, '###TRAINER###', $lTrainertemplate);
        $sRet = $this->cObj->substituteSubPart($sRet, '###PAGE###', $lPagetemplate);
        $sRet = $this->cObj->substituteSubPart($sRet, '###SIMILAREVENTS###', $lSimilartemplate);
        $sRet = $this->cObj->substituteSubPart($sRet, '###NOEVENT###', '');
        $sRet = $this->cObj->substituteSubPart($sRet, '###NOCONDITIONS###', '');
        $sRet = $this->cObj->substituteSubPart($sRet, '###NOTRAINER###', '');
        $sRet = $this->cObj->substituteSubPart($sRet, '###NOPAGE###', '');

        if (is_array($GLOBALS['TYPO3_CONF_VARS']['EXTCONF'][$this->extKey][$this->prefixId]['displayDetail'])) {
            foreach ($GLOBALS['TYPO3_CONF_VARS']['EXTCONF'][$this->extKey][$this->prefixId]['displayDetail'] as $classRef) {
                $hookObj = & t3lib_div::getUserObj($classRef);
                if (method_exists($hookObj, 'customDisplayDetail')) {
                    $hookObj->customDisplayDetail($sRet, $MACourse);
                }
            }
        }

        $sRet = $this->cObj->substituteMarkerArray($sRet, $MACourse);

        $this->addMetadata();

        return $sRet;
    }

    /**
     * TODO Documentation
     */
    private function addMetadata(){
        //Call the metadata helper to optionally add keywords and description
        $metaData = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstance('tx_abcourses_metadata',$this->cObj);
        $metaData->addDescription();
        $metaData->addKeywords();
    }

    /**
     * This function is responsible for rendering the subription view for an event. It should be triggered via a hyperlink with an id of the event the subription form should be rendered for.
     *
     * @param string $content: By default this is empty.
     * @param array $conf: An array of TS configuration for this view.
     * @return string : The rendered view
     */
    function displaySubscribe($content, $conf)
    {

        $debugme = false;

        if ($debugme) {
            debug('displaySubscribe');
        }

        //Variablen initialisieren
        $lConf = $this->conf['eventsubscribe.']; // TS einlesen

        $lTemplate = $this->cObj->getSubpart($this->template, '###SUBSCRIBE###'); // Gesamttemplate extrahieren
        $lEventtemplate = $this->cObj->getSubpart($lTemplate, '###EVENT###'); // Subpart extrahieren
        $lTrainertemplate = $this->cObj->getSubpart($lTemplate, '###TRAINER###'); // Subpart extrahieren
        $lParticipanttemplate = $this->cObj->getSubpart($lTemplate, '###PARTICIPANTS###'); // Subpart extrahieren
        $lNoParticipanttemplate = $this->cObj->getSubpart($lTemplate, '###NOPARTICIPANTS###'); // Subpart extrahieren
        $lTrainertemplateRow = $this->cObj->getSubpart($lTemplate, '###ROWTRAINER###'); // Subpart extrahieren
        $lNoTrainertemplate = $this->cObj->getSubpart($lTemplate, '###NOTRAINER###'); // Subpart extrahieren
        $lLocationtemplate = $this->cObj->getSubpart($lTemplate, '###LOCATION###'); // Subpart extrahieren
        $lNoLocationtemplate = $this->cObj->getSubpart($lTemplate, '###NOLOCATION###'); // Subpart extrahieren

        $sRet = ''; // Variable für Ausgabe

        $eventId = ($this->eventToSubscribe ? $this->eventToSubscribe : $this->piVars['eventId']);

        $objLoader =& $GLOBALS['T3_VAR']['abcourses']['cLoader'];

        //+++++++++++++++++++++++++
        //Daten des EVENTS abfragen
        //+++++++++++++++++++++++++
        $Event = & $objLoader->get_Event($eventId);
        $foo = ($debugme ? debug($Event) : '');

        //Übergabeparameter prüfen
        if (!is_numeric($eventId) || $Event == 0) {
            return $this->templateNoData;
        }

        //++++++++++++++++++
        //Kursdaten einlesen
        //++++++++++++++++++
        $MACourse = array();
        $this->fillCourseMA($MACourse, $lConf, '', '', $eventId);

        //+++++++++++++++++++
        //Eventdaten einlesen
        //+++++++++++++++++++
        $MAEvent = array();
        $this->fillEventMA($MAEvent, $lConf, $MACourse['###COST###'], '', $eventId);
        $lEventtemplate = $this->cObj->substituteMarkerArray($lEventtemplate, $MAEvent);

        //+++++++++++++++++++++
        //Trainerdaten einlesen
        //+++++++++++++++++++++
        $MATrainer = array();
        $this->fillTrainerMA($MATrainer, $lConf, '', '', $eventId);
        $lTrainertemplateRow = $this->cObj->substituteMarkerArray($lTrainertemplateRow, $MATrainer);
        $lTrainertemplate = $this->cObj->substituteSubpart($lTrainertemplate, '###ROWTRAINER###', $lTrainertemplateRow);
        if ($MATrainer['###NODATA###']) {
            $lTrainertemplate = $lNoTrainertemplate;
        }


        //+++++++++++++++++++
        //Teilnehmer einlesen
        //+++++++++++++++++++

        $participants = "";
        //-------------------------------------------------------------------
        //should we trigger the rendering of associated participants as well?
        //-------------------------------------------------------------------
        if ($lParticipanttemplate) {
            if (!$Event->arrParticipants) {
                $Event->load_arrParticipants($objLoader);
            }
            if ($Event->countParticipants()) {
                $singleParticipant = $this->cObj->getSubpart($lParticipanttemplate, '###PARTICIPANT###');
                $tmp = "";
                reset($Event->arrParticipants);
                while (list($id, $Participant) = each($Event->arrParticipants)) {
                    $tmp .= $Participant->printme($singleParticipant, $this, $lConf['participant.']);
                }
                $participants = $this->cObj->substituteSubpart($lParticipanttemplate, '###PARTICIPANT###', $tmp);
            } else {
                $participants = $lNoParticipanttemplate;
            }
        }


        //++++++++++++++++++++++++++
        //Veranstaltungsort einlesen
        //++++++++++++++++++++++++++
        $MALocation = array();
        $this->fillLocationMA($MALocation, $lConf, '', '', $eventId);
        $lLocationtemplate = $this->cObj->substituteMarkerArray($lLocationtemplate, $MALocation);
        if ($MALocation['###NODATA###']) {
            $lLocationtemplate = $lNoLocationtemplate;
        }

        if ($debugme) {
            debug('MACourse');
            debug($MACourse);
            debug('MAEvent');
            debug($MAEvent);
            debug('MATrainer');
            debug($MATrainer);
            debug('MALocation');
            debug($MALocation);
        }

        //+++++++++++++++++++++++
        //Template zusammenführen
        //+++++++++++++++++++++++
        $lTemplate = $this->cObj->substituteSubpart($lTemplate, '###EVENT###', $lEventtemplate); // Subpart extrahieren
        $lTemplate = $this->cObj->substituteSubpart($lTemplate, '###TRAINER###', $lTrainertemplate);
        $lTemplate = $this->cObj->substituteSubpart($lTemplate, '###NOTRAINER###', '');
        $lTemplate = $this->cObj->substituteSubpart($lTemplate, '###PARTICIPANTS###', $participants);
        $lTemplate = $this->cObj->substituteSubpart($lTemplate, '###NOPARTICIPANTS###', '');
        $lTemplate = $this->cObj->substituteSubpart($lTemplate, '###LOCATION###', $lLocationtemplate);
        $lTemplate = $this->cObj->substituteSubpart($lTemplate, '###NOLOCATION###', '');

        //+++++++++++++++++++
        //Kategorie einlesen
        //+++++++++++++++++++
        $MACategorie = array();
        $this->fillCategorieMA($MACategorie, $lConf, '', '', $MACourse['###COURSEUID###']);
        $lTemplate = $this->cObj->substituteMarkerArray($lTemplate, $MACategorie);

        //+++++++++++++++++++
        //Kursdaten einfügen
        //+++++++++++++++++++
        $lTemplate = $this->cObj->substituteMarkerArray($lTemplate, $MACourse);

        //+++++++++++++++++++++++++++++++++
        //Anmeldeformular/Buchung einbinden
        //+++++++++++++++++++++++++++++++++
        if ($this->validateContingentForEvent($eventId)) {
            $sSubscribeform = $this->displaySubscribeform($eventId, $MACourse, $MAEvent, $MATrainer, $MALocation);
        } else {
            $sSubscribeform = $this->cObj->stdWrap(
                $this->pi_getLL('nocontingent'),
                $lConf['noContingentWrap.']
            );
        }

        $lTemplate = $this->cObj->substituteMarker($lTemplate, '###SUBSCRIBEFORM###', $sSubscribeform);

        if ($debugme) {
            debug($sSubscribeform);
        }

        $this->addMetadata();

        return $lTemplate;
    }

    /**
     * Returns a flag to take notice of the event contingent or not.
     *
     * @return integer
     */
    function takeNoticeOfContingent()
    {
        if (!$this->conf['usecontingent']) {
            return 0;
        }
        return 1;
    }

    /**
     * Checks if it is possible to subscribe to this event, regarding on the contingent.
     *
     * @param integer $eventId: The id of the event
     * @return integer: Retuns 1 if you can subscribe to this event
     * @deprecated Use the cEvent Class instead.
     */
    function validateContingentForEvent($eventId)
    {
        if (!$this->takeNoticeOfContingent()) {
            return 1;
        }
        if ($this->takeNoticeOfContingent() && $eventId) {
            $objLoader =& $GLOBALS['T3_VAR']['abcourses']['cLoader'];
            $Event =& $objLoader->get_Event($eventId);
            return $Event->subscribeable($this);
        }
        return 0;
    }

    function displayHelp()
    {
        $strRet = 'You have not configured the view type to display!';
        return $strRet;
    }

    function displaySubscribeform($eventId, $MACourse, $MAEvent, $MATrainer, $MALocation)
    {
        $debugme = false;

        $lTemplate = $this->cObj->getSubpart($this->template, '###SUBSCRIBEFORMTMPL###');
        $lNoTemplate = $this->cObj->getSubpart($lTemplate, '###NOSUBSCRIBEFORMTMPL###');

        $MA = array();
        $lConf = $this->conf['subscribe.'];

        $usedLabels = $lConf['usedLabels'];
        //@deprecated
        if (!$usedLabels) $usedLabels = $lConf['usedlabels'];

        $label = explode(',', $usedLabels);
        $required = explode(',', $lConf['required']);
        $sValidate = '';

        //since there is a special usage of the selectbox for locations, you have to configure the name attribute of the selectbox in the subscribeform.
        //ignore this, if you don't want to use the manual selectbox
        $manlocselname = $lConf['manlocselname'];
        $manlocselparams = $lConf['manlocselparams'];
        $manlocselvalues = $lConf['manlocselvalues'];

        if ($debugme) {
            debug($lConf);
            debug($label);
        }

        //MA Leeren
        foreach ($label as $value) {
            $MA['###' . strtoupper($value) . '###'] = '';
        }

        //Formulardaten vorhanden? Einlesen!
        if (isset($_POST['subscribe'])) {
            foreach ($_POST as $key => $value) {
                $MA['###' . strtoupper($key) . '###'] = $value;
            }

            foreach ($required as $key) {
                if (!$MA['###' . strtoupper($key) . '###'] || (strtoupper($key) == 'EMAIL' && !t3lib_div::validEmail($MA['###' . strtoupper($key) . '###']))) {
                    $sValidate .= ucfirst(strtolower($key)) . '<br />';
                }
            }
        }


        /*
		 * generates the selectbox for manual location choice
		 * generated selectbox is sticky
		 * this is only rendered if there is no location specified for the displayed course
		 */
        $selLoc = '';

        if ($MALocation['###NODATA###']) {
            $selLoc = "<select name=\"$manlocselname\" $manlocselparams>\n";
            foreach (explode(',', $manlocselvalues) as $value) {
                $selLocSelected = '';
                if (rawurlencode($value) == $MA['###' . strtoupper($manlocselname) . '###']) {
                    $selLocSelected = ' selected';
                };
                $selLoc .= "<option value=\"" . rawurlencode($value) . "\" $selLocSelected>$value</option>\n";
            }
            $selLoc .= "</select>\n";
        } else {
            $selLoc = $MALocation['###LOCNAME###'] . "<input type=\"hidden\" name=\"$manlocselname\" value=\"" . $MALocation['###LOCNAME###'] . "\">\n";
        }

        $MA['###SELLOCATION###'] = $selLoc;

        $MA['###EVENTID###'] = $eventId;
        $MA['###PATHSUBSCRIBE###'] = $this->pi_linkTP_keepPIvars_url();

        $foo = ($debugme ? debug($MA) : '');

        if ($sValidate == '' && isset($_POST['subscribe'])) {
            //trigger the subscription interface
            if ($this->startSubscription($MA, $MACourse, $MAEvent, $MATrainer, $MALocation)) {
                //redirect the user to the Success-Page
                if (!$debugme) {
                    header('Location: ' . $this->cObj->getTypoLink_URL($this->conf['pidSubscribeSuccess']));
                    return;
                } else {
                    $lTemplate = 'Redirect after subscription is deactivated for testing purposes';
                }
            } else {
                $lTemplate = $lNoTemplate;
            }

        } else {
            $MA['###LABELWARNING###'] = $this->cObj->stdWrap((isset($_POST['subscribe']) ? $this->pi_getLL('labelwarningsubscribe') : ''), $lConf['labelWarningWrap.']);
            $MA['###WARNING###'] = $this->cObj->stdWrap((isset($_POST['subscribe']) ? $sValidate : ''), $lConf['warningWrap.']);

            //should we render some possible accomodations too?
            $templateHotels = $this->cObj->getSubpart($lTemplate, '###HOTELS###');
            $Event = '';
            if ($templateHotels) {
                $objLoader =& $GLOBALS['T3_VAR']['abcourses']['cLoader'];
                $Event =& $objLoader->get_Event(intval($eventId));
                $Event->load_arrHotels($objLoader);
                if ($Event->countHotels() == 0) {
                    //No hotels could be found for this event. So deleting the template will effect that the next code part is not be executed.
                    $templateHotels = '';
                }
            }
            if ($templateHotels) {
                $arrHotels = $Event->get_arrHotels();
                $templateHotel = $this->cObj->getSubpart($templateHotels, '###HOTEL###');
                $hotel = '';
                reset($arrHotels);
                while (list($id, $Hotel) = each($arrHotels)) {
                    $hotel .= $Hotel->printme($templateHotel, $this, $this->conf['subscribe.']['hotel.']);
                }
                $templateHotels = $this->cObj->substituteSubpart($templateHotels, '###HOTEL###', $hotel);

                $startdate = mktime(0, 0, 0, date("n", $Event->getSingleData('coursestart')), date("j", $Event->getSingleData('coursestart')) - intval($lConf['accommodationPeriod']), date("Y", $Event->getSingleData('coursestart')));

                $enddate = $Event->getSingleData('courseend');
                if (!$enddate) $enddate = $startdate;
                $enddate = mktime(0, 0, 0, date("n", $enddate), date("j", $enddate) + intval($lConf['accommodationPeriod']), date("Y", $enddate));

                $arrStartPeriod = Array();
                for ($i = 1; $i <= intval($lConf['accommodationPeriod']); $i++) {
                    $arrStartPeriod[] = AbcoursesUtil::getFormattedDate($this->conf['ddmmyy'], mktime(0, 0, 0, date("n", $startdate), date("j", $startdate) + $i, date("Y", $startdate)));
                }
                $MA['###SELPERIODSTART###'] = $this->renderSelectBox('accommodation-start', $arrStartPeriod, $MA['###ACCOMMODATION-START###'], true);

                $arrEndPeriod = Array();
                for ($i = intval($lConf['accommodationPeriod']); $i > 0; $i--) {
                    $arrEndPeriod[] = AbcoursesUtil::getFormattedDate($this->conf['ddmmyy'], mktime(0, 0, 0, date("n", $enddate), date("j", $enddate) - $i, date("Y", $enddate)));
                }
                $MA['###SELPERIODEND###'] = $this->renderSelectBox('accommodation-end', $arrEndPeriod, $MA['###ACCOMMODATION-END###'], true);
            }
            $lTemplate = $this->cObj->substituteSubpart($lTemplate, '###HOTELS###', $templateHotels);

            $lTemplate = $this->cObj->substituteMarkerArray($lTemplate, $MA);

            $lTemplate = $this->cObj->substituteSubpart($lTemplate, '###NOSUBSCRIBEFORMTMPL###', '');
        }

        if ($debugme) {
            debug($MA);
            debug($sValidate);
        }

        return $lTemplate;
    }

    //+++++++++++++++
    //Hilfsfunktionen
    //+++++++++++++++

    /**
     * This returns an calculated and formatted price, depending on your TS configurations.
     *
     * @param unknown_type $price Price to use for calculation
     * @param unknown_type $conf  TS configuration
     * @param unknown_type $brutto Flag. true means, the returned price will be calculated as "with VAT".
     * @return unknown
     */
    function calcPrice($price, $conf, $brutto = '1')
    {
        $price = doubleval($price);
        if ($conf['priceWithTax']) {
            if (!$brutto) {
                $price = ($price / doubleval(100 + intval($conf['taxValue']))) * doubleval(100);
            }
        } else {
            if ($brutto) {
                $price = $price * (1.0 + doubleval($conf['taxValue'] / 100));
            }
        }
        return number_format($price, 2, ',', '.');
    }

    /**
     * Fill a given MarkerArray with standard fields for events.
     *
     * @param array $MA    The marker array
     * @param array $lConf    TS to use
     * @param unknown_type $sCost    Basic price of the course
     * @param array $rsEvent    Event recordset
     * @param unknown_type $eventId    Id of the event
     * @param unknown_type $days    Days of this this event
     */
    function fillEventMA(&$MA, $lConf, $sCost = 0, $rsEvent = '', $eventId = '', $days = '')
    {
        $debugme = false;

        $event = '';
        if ($debugme) {
            debug('fillEventMA');
        }

        if ($rsEvent) {
            $event = $rsEvent;
            if ($debugme) {
                debug('Recordset übergeben');
            }
        } elseif ($eventId) {
            $lrsEvent = $GLOBALS['TYPO3_DB']->exec_SELECTquery(
                'tx_abcourses_event.*',
                'tx_abcourses_event',
                'uid = ' . intval($eventId) . $this->cObj->enableFields('tx_abcourses_event')
            );
            $event = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($lrsEvent);
        }
        if (!$event) {
            //Keine Daten? Abbrechen.
            $MA['###NODATA###'] = 1;
            return;
        }

        //get the objectlayer
        $objLoader =& $GLOBALS['T3_VAR']['abcourses']['cLoader'];
        $eventObj =& $objLoader->get_Event($event['uid']);

        $MA = "";
        $MA = $eventObj->getEventMA($this, $lConf, $sCost, $objLoader);

        if ($debugme) {
            debug($MA);
        }
    }

    function fillSimilarMa(&$MA, $lConf, $fClear = 0)
    {
        if ($fClear) {
            $MA['###SIMILARLINK###'] = '';
            $MA['###SIMILARTARGET###'] = '';
            return;
        }
        $MA['###SIMILARLINK###'] = $this->pi_linkTPWithAnchor($this->pi_getLL('lbsimilarlink'), 'similar', Array($this->prefixId . '[courseId]' => $this->piVars['courseId']));
        $MA['###SIMILARLINK###'] = $this->cObj->stdWrap($MA['###SIMILARLINK###'], $lConf['similarLinkWrap.']);
        $MA['###SIMILARTARGET###'] = '<a name="similar">' . $this->pi_getLL('lbsimilarlinktarget') . '</a>';
        $MA['###SIMILARTARGET###'] = $this->cObj->stdWrap($MA['###SIMILARTARGET###'], $lConf['similarLinkTargetWrap.']);
    }

    function fillCourseMA(&$MA, $lConf, $rsCourse = '', $courseId = '', $eventId = '', $prefix = '')
    {

        //   FB: Füllt ein als Referenz übergebenes MarkerArray mit Standardfeldern für Termine
        //   PI: &$MA : Referenz auf das zu füllende MA.
        //        $lConf: TS Parameter für Formatierungen der Marker
        //        $rsCourse: Recordset. Zeiger auf Position des benötigten Elements.
        //        $courseId: Id eines speziellen Kurses. $rsCourse hat Vorrang!
        //        $eventId: Id eines speziellen Events. $courseId hat Vorrang!
        //        $prefix: wird den QueryAbfragen vorangestellt.
        //   PO: void


        $debugme = false;

        if ($debugme) {
            debug('fillCourseMA');
        }

        $course = '';

        if ($rsCourse) {
            $course = $rsCourse;
            if ($debugme) {
                debug('Recordset übergeben');
            }
        } elseif ($courseId) {
            //Kurs nach ID abfragen
            $lrsCourse = $GLOBALS['TYPO3_DB']->exec_SELECTquery(
                '*',
                'tx_abcourses_course',
                'uid = ' . intval($courseId) . $this->cObj->enableFields('tx_abcourses_course')
            );
            $course = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($lrsCourse);
            if ($debugme) {
                debug('Abfrage nach courseId ' . $courseId);
            }
        } elseif ($eventId) {
            //Kurs zu einer EventId abfragen
            $lrsCourse = $GLOBALS['TYPO3_DB']->exec_SELECT_mm_query(
                'tx_abcourses_course.*',
                'tx_abcourses_event',
                'tx_abcourses_event_course_mm',
                'tx_abcourses_course',
                $this->cObj->enableFields('tx_abcourses_event') . '
                             AND tx_abcourses_event_course_mm.uid_local = ' . intval($eventId) . '
                             AND tx_abcourses_course.uid = tx_abcourses_event_course_mm.uid_foreign'
            );
            $course = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($lrsCourse);
            if ($debugme) {
                debug('Abfrage nach eventId ' . $eventId);
            }
        }

        if (!$course) {
            //Keine Daten? Abbrechen!
            $MA['###NUMBER###'] = '';
            $MA['###NUMBERLINK###'] = '';
            $MA['###CONTINGENT###'] = '';
            $MA['###TITLE###'] = '';
            $MA['###SUBTITLE###'] = '';
            $MA['###TEASER###'] = '';
            $MA['###DESCRIPTION###'] = '';
            $MA['###EDUPOINTS###'] = '';
            $MA['###DAYS###'] = '';
            $MA['###CONDITIONS###'] = '';
            $MA['###DETAILLINK###'] = '';
            $MA['###TITLELINK###'] = '';
            $MA['###COST###'] = '';
            $MA['###COURSESKILLLEVELIMAGE###'] = '';
            $MA['###NODATA###'] = 1;
            return;
        }

        //Daten (Kurs) wrappen und im MA ablegen.
        $MA['###COURSEUID###'] = (isset($course[$prefix . 'uid']) ? $course[$prefix . 'uid'] : '');
        $MA['###NUMBER###'] = (isset($course[$prefix . 'number']) ? $this->cObj->stdWrap($course[$prefix . 'number'], $lConf['courseNumberWrap.']) : '');
        $MA['###TITLE###'] = (isset($course[$prefix . 'title']) ? $this->cObj->stdWrap($course[$prefix . 'title'], $lConf['courseTitleWrap.']) : '');
        $MA['###SUBTITLE###'] = (isset($course[$prefix . 'subtitle']) ? $this->cObj->stdWrap($course[$prefix . 'subtitle'], $lConf['courseSubtitleWrap.']) : '');
        $MA['###TEASER###'] = (isset($course[$prefix . 'teaser']) ? $this->cObj->stdWrap($this->cObj->parseFunc($course[$prefix . 'teaser'], $lConf['parseFunc.']), $lConf['courseTeaserWrap.']) : '');
        $MA['###DESCRIPTION###'] = (isset($course[$prefix . 'description']) ? $this->cObj->stdWrap($this->cObj->parseFunc($course[$prefix . 'description'], $lConf['parseFunc.']), $lConf['courseDescriptionWrap.']) : '');
        $MA['###EDUPOINTS###'] = (intval($course[$prefix . 'edupoints']) > 0 ? $this->cObj->stdWrap($course[$prefix . 'edupoints'], $lConf['courseEdupointsWrap.']) : $this->pi_getLL('novalue'));
        $MA['###DAYS###'] = (isset($course[$prefix . 'days']) ? $this->cObj->stdWrap($course[$prefix . 'days'], $lConf['courseDaysWrap.']) : '');
        $MA['###DAYSLABEL###'] = (isset($course[$prefix . 'days']) ? $this->cObj->stdWrap((intval($course[$prefix . 'days']) > 1 ? $this->pi_getLL('labeldays') : $this->pi_getLL('labelday')), $lConf['courseDayslabelWrap.']) : '');
        $MA['###CONDITIONSTEXT###'] = (isset($course[$prefix . 'conditions']) ? $this->cObj->stdWrap($this->cObj->parseFunc($course[$prefix . 'conditions'], $lConf['parseFunc.']), $lConf['courseConditionWrap.']) : '');
        $MA['###DETAILLINK###'] = (isset($course[$prefix . 'uid']) ? $this->cObj->stdWrap(
            $this->pi_LinkToPage($this->pi_getLL('coursedetaillinklabel'),
                $this->conf[$prefix . 'pidCourseDetails'], '',
                array($this->prefixId . '[courseId]' => $course[$prefix . 'uid']))
            , $lConf['courseDetaillinkWrap.']) : '');

        $MA['###TITLELINK###'] = (isset($course[$prefix . 'uid']) && isset($course[$prefix . 'title']) ? $this->cObj->stdWrap(
            $this->pi_LinkToPage($course[$prefix . 'title'],
                $this->conf[$prefix . 'pidCourseDetails'], '',
                array($this->prefixId . '[courseId]' => $course[$prefix . 'uid']))
            , $lConf['courseTitlelinkWrap.']) : '');

        $MA['###NUMBERLINK###'] = (isset($course[$prefix . 'uid']) && isset($course[$prefix . 'number']) ? $this->cObj->stdWrap(
            $this->pi_LinkToPage($course[$prefix . 'number'],
                $this->conf[$prefix . 'pidCourseDetails'], '',
                array($this->prefixId . '[courseId]' => $course[$prefix . 'uid']))
            , $lConf['courseNumberlinkWrap.']) : '');


        $MA['###CONTINGENT###'] = ($course[$prefix . 'contingent'] != '' ? $this->cObj->stdWrap($course[$prefix . 'contingent'], $lConf['courseContingentWrap.']) : '');
        //Da die Kosten im Event berechnet werden sind diese hier nur übernommen, ohne gewrapped zu werden.
        $MA['###COST###'] = ($course[$prefix . 'uid'] ? $course[$prefix . 'cost'] : '');

        if (is_numeric($MA['###COST###']) && (intval($MA['###COST###']) != 0)) {
            //Base price with and without tax
            $price = doubleval($MA['###COST###']);
            $MA['###BASEPRICE###'] = $this->cObj->stdWrap($this->calcPrice($price, $this->conf, 0), $lConf['basepriceWrap.']);
            $MA['###BASEPRICETAX###'] = $this->cObj->stdWrap($this->calcPrice($price, $this->conf, 1), $lConf['basepricetaxWrap.']);
        } else {
            $MA['###BASEPRICE###'] = '0';
            $MA['###BASEPRICETAX###'] = '0';
        }

        $sImage = $lConf['courseSkillImageWrap.'];
        $sImage['if.']['isTrue'] = isset($course[$prefix . 'skilllevel']);
        $sImage['file'] = $this->skillimagepath . 'icon_tx_abcourses_skillLevel_' . $course[$prefix . 'skilllevel'] . '.gif'; //Dateipfad zusammensetzen

        if ($debugme) {
            debug($this->skillimagepath);
            debug($course[$prefix . 'skilllevel']);
            debug($sImage['file']);
        }

        $sImage = $this->cObj->IMAGE($sImage);
        $MA['###COURSESKILLLEVELIMAGE###'] = (isset($course[$prefix . 'skilllevel']) ? $sImage : '');

        //MA mit Type auffüllen
        if (isset($course[$prefix . 'uid'])) {
            $this->fillTypeMA($MA, $lConf, '', '', $course[$prefix . 'uid']);
        }

        if ($debugme) {
            debug($MA);
        }
    }

    /**
     * This fill an referenced MarkerArray with attributes of an specific category.
     *
     * @param array $MA    : referenced array to fill
     * @param array $lConf: a piece of ts configuration
     * @param array $rsCategorie : if set, this array is used for filling MA
     * @param integer $categorieId : if set, this categorie will be loaded from database and is used for fillng MA
     * @param integer $courseId : if set, the categorie wich is assigned with the given course id will be loaded from database and is used for fillng MA
     * @param string $prefix: tablename or alias for tablename of the categorie table.
     *
     * @deprecated Use cCategory instead.
     */
    function fillCategorieMA(&$MA, $lConf, $rsCategorie = '', $categorieId = '', $courseId = '', $prefix = '')
    {
        $categorie = '';
        $debugme = false;

        if ($rsCategorie) {
            $categorie = $rsCategorie;
            if ($debugme) {
                debug('Recordset übergeben');
            }
        } elseif ($categorieId) {
            $lrsCategorie = $GLOBALS['TYPO3_DB']->exec_SELECTquery(
                '*',
                'tx_abcourses_categorie',
                'tx_abcourses_categorie.pid IN (' . $this->pi_getPidList(
                    $this->pages,
                    $this->conf["recursive"]
                ) . ')' . $this->cObj->enableFields('tx_abcourses_categorie') .
                ' AND tx_abcourses_categorie.uid = ' . intval($categorieId)
            );
            $categorie = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($lrsCategorie);
            if ($debugme) {
                debug('Abfrage nach categorieId ' . $categorieId);
            }

        } elseif ($courseId) {
            $lrsCategorie = $GLOBALS['TYPO3_DB']->exec_SELECT_mm_query(
                'tx_abcourses_categorie.*',
                'tx_abcourses_course',
                'tx_abcourses_course_categorie_mm',
                'tx_abcourses_categorie',
                'AND tx_abcourses_categorie.pid IN (' . $this->pi_getPidList(
                    $this->pages,
                    $this->conf["recursive"]
                ) . ')
                    AND  tx_abcourses_course_categorie_mm.uid_local = ' . intval($courseId) . '
                    AND  tx_abcourses_categorie.uid = tx_abcourses_course_categorie_mm.uid_foreign ' .
                $this->cObj->enableFields('tx_abcourses_categorie')
            );
            $categorie = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($lrsCategorie);
            if ($debugme) {
                debug('Abfrage nach courseId ' . $courseId);
            }
        }

        if (!$categorie) {
            $MA['###CATTITLELINK###'] = '';
            $MA['###CATTITLE###'] = '';
            $MA['###CATTEASER###'] = '';
            $MA['###CATIMAGE###'] = '';
            $MA['###NODATA###'] = 1;
            return;
        }

        // Datensatz (Kategorie): Inhalte über cObj wrappen.
        $sTitleLink = $this->cObj->stdWrap(
            $this->pi_linkToPage(
                $categorie[$prefix . 'title'],
                $this->conf['pidOverview'],
                '',
                array($this->prefixId . '[catId]' => $categorie[$prefix . 'uid'], $this->prefixId . '[mode]' => 'courses')
            ),
            $lConf['catTitleLinkWrap.']
        );

        $sTitle = $this->cObj->stdWrap($categorie[$prefix . 'title'], $lConf['catTitleWrap.']);

        $sTeaser = $this->cObj->stdWrap(
            $this->cObj->parseFunc($categorie[$prefix . 'teaser'],
                $lConf['parseFunc.']),
            $lConf['catTeaserWrap.']
        );

        $sImage = $lConf['catImageWrap.'];
        $sImage['if.']['isTrue'] = $categorie[$prefix . 'image'];
        $sImage['file'] = $this->conf['uploaddir'] . $categorie[$prefix . 'image']; //Dateipfad zusammensetzen
        $sImage = $this->cObj->IMAGE($sImage);


        $MA['###CATTITLELINK###'] = $sTitleLink;
        $MA['###CATTITLE###'] = $sTitle;
        $MA['###CATTEASER###'] = $sTeaser;
        $MA['###CATIMAGE###'] = $sImage;

        if ($debugme) {
            debug('fillCategorieMA()');
            debug($GLOBALS['TYPO3_DB']->debug_lastBuiltQuery);
            debug($MA);
        }


    }

    function fillTypeMA(&$MA, $lConf, $rsType = '', $typeId = '', $courseId = '')
    {
        $debugme = false;
        $type = '';

        if ($rsType) {
            $type = $rsType;
            if ($debugme) {
                debug('Debug output fillTypeMA: Recordset übergeben');
            }
        } elseif ($typeId) {
            $lrsType = $GLOBALS['TYPO3_DB']->exec_SELECTquery(
                '*',
                'tx_abcourses_type',
                'tx_abcourses_type.pid IN (' . $this->pi_getPidList(
                    $this->pages,
                    $this->conf["recursive"]
                ) . ')' . $this->cObj->enableFields('tx_abcourses_type') .
                ' AND tx_abcourses_type.uid = ' . intval($typeId)
            );
            $type = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($lrsType);
            if ($debugme) {
                debug('Debug output fillTypeMA: Abfrage nach typeId ' . $typeId);
            }

        } elseif ($courseId) {

            $lrsType = $GLOBALS['TYPO3_DB']->exec_SELECT_mm_query(
                'tx_abcourses_type.*',
                'tx_abcourses_course',
                'tx_abcourses_course_type_mm',
                'tx_abcourses_type',
                'AND tx_abcourses_type.pid IN (' . $this->pi_getPidList(
                    $this->pages,
                    $this->conf["recursive"]
                ) . ')' . $this->cObj->enableFields('tx_abcourses_type') .
                ' AND tx_abcourses_course_type_mm.uid_local = ' . intval($courseId) . '
    						 AND tx_abcourses_type.uid = tx_abcourses_course_type_mm.uid_foreign'
            );
            $type = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($lrsType);
            if ($debugme) {
                debug('Debug output fillTypeMA: Abfrage nach courseId ' . $courseId);
            }
        }


        if ($type) {
            $MA['###TYPENAME###'] = $this->cObj->stdWrap($type['typename'], $lConf['typeNameWrap.']);
        } else {
            $MA['###TYPENAME###'] = '';
            $MA['###TYPENODATA###'] = 1;
        }

        if ($debugme) {
            debug('Debug output fillTypeMA: fillTypeMA()');
            debug($GLOBALS['TYPO3_DB']->debug_lastBuiltQuery);
            debug($MA);
        }

        unset($lrsType);
        unset($type);
    }

    function fillTrainerMA(&$MA, $lConf, $rsTrainer = '', $trainerId = '', $eventId = '')
    {
        //FB: Ermittelt Trainerdaten
        /*FI: &$MA Referenziertes Array
		 $lConf TS Konfiguration für Wraps
		 $trainerId Für Filter nach Trainer-Id
		 $eventId Für Filter nach Event-Id. $trainerId hat Vorrang.
		 */

        $trainer = '';

        if ($rsTrainer) {
            $trainer = $rsTrainer;
        } elseif ($trainerId) {
            $lrsTrainer = $GLOBALS['TYPO3_DB']->exec_SELECTquery(
                'tt_address.*',
                'tt_address',
                'tt_address.uid = ' . intval($trainerId) . $this->cObj->enableFields('tt_address')
            );
            $trainer = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($lrsTrainer);
        } elseif ($eventId) {
            $lrsTrainer = $GLOBALS['TYPO3_DB']->exec_SELECT_mm_query(
                'tt_address.*',
                'tx_abcourses_event',
                'tx_abcourses_event_trainer_mm',
                'tt_address',
                'AND tt_address.pid IN (' . $this->pi_getPidList(
                    $this->pages,
                    $this->conf["recursive"]
                ) . ')' . $this->cObj->enableFields('tt_address') . '
    						 AND tx_abcourses_event_trainer_mm.uid_local = ' . intval($eventId) . '
    						 AND tt_address.uid = tx_abcourses_event_trainer_mm.uid_foreign'
            );
            $trainer = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($lrsTrainer);
        }

        if (!$trainer) {
            $MA['###TRAINERTITLE###'] = '';
            $MA['###FULLNAME###'] = '';
            $MA['###TRAINERIMAGE###'] = '';
            $MA['###TRAINERNUMBER###'] = '';
            $MA['###TRAINERPOSITION###'] = '';
            $MA['###NODATA###'] = 1;
            return;
        }

        $MA['###TRAINERTITLE###'] = ($trainer['title'] ? $this->cObj->stdWrap($trainer['title'], $lConf['trainerTitleWrap.']) : '');
        $MA['###FULLNAME###'] = ($trainer['name'] ? $this->cObj->stdWrap($trainer['name'], $lConf['trainerFullnameWrap.']) : '');
        $MA['###TRAINERCOMPANY###'] = ($trainer['company'] ? $this->cObj->stdWrap($trainer['company'], $lConf['trainerCompanyWrap.']) : '');

        $sImage = $lConf['trainerImageWrap.'];
        $sImage['if.']['isTrue'] = $trainer['image'];
        $sImage['file'] = "uploads/pics/" . $trainer['image']; //Dateipfad zusammensetzen
        $sImage = $this->cObj->IMAGE($sImage);
        $MA['###TRAINERIMAGE###'] = $sImage;
        $MA['###TRAINERNUMBER###'] = $trainer['tx_abcourses_tnumber'];
        $MA['###TRAINERPOSITION###'] = $trainer['tx_abcourses_position'];

    }

    function fillLocationMA(&$MA, $lConf, $rsLocation = '', $locationId = '', $eventId = '')
    {
        //FB: Ermittelt Veranstaltungsort Daten
        /*FI: &$MA Referenziertes Array
		 $lConf TS Konfiguration für Wraps
		 $rsLocation Recordset mit bereits bereitgestellten Daten
		 $locationId Für Filter nach Location-Id
		 $eventId Für Filter nach Event-Id. $locationId hat Vorrang.
		 */
        $location = '';

        if ($rsLocation) {
            $location = $rsLocation;
        } elseif ($locationId) {
            $lrsLocation = $GLOBALS['TYPO3_DB']->exec_SELECTquery(
                'tx_abcourses_location.*',
                'tx_abcourses_location',
                'tx_abcourses_location.uid = ' . intval($locationId) . $this->cObj->enableFields('tx_abcourses_location')
            );
            $location = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($lrsLocation);
        } elseif ($eventId) {
            $lrsLocation = $GLOBALS['TYPO3_DB']->exec_SELECT_mm_query(
                'tx_abcourses_location.*',
                'tx_abcourses_event',
                'tx_abcourses_event_location_mm',
                'tx_abcourses_location',
                'AND tx_abcourses_location.pid IN (' . $this->pi_getPidList(
                    $this->pages,
                    $this->conf["recursive"]
                ) . ')' . $this->cObj->enableFields('tx_abcourses_location') . '
    						 AND tx_abcourses_event_location_mm.uid_local = ' . intval($eventId) . '
    						 AND tx_abcourses_location.uid = tx_abcourses_event_location_mm.uid_foreign'
            );
            $location = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($lrsLocation);
        }

        if (!$location) {
            $MA['###LOCNAME###'] = '';
            $MA['###LOCSTREET###'] = '';
            $MA['###LOCZIP###'] = '';
            $MA['###LOCCITY###'] = '';
            $MA['###LOCPHONE###'] = '';
            $MA['###LOCFAX###'] = '';
            $MA['###LOCEMAIL###'] = '';
            $MA['###LOCPERSON###'] = '';
            $MA['###NODATA###'] = 1;
            return;
        }

        $MA['###LOCNAME###'] = ($location['title'] ? $this->cObj->stdWrap($location['title'], $lConf['locationNameWrap.']) : '');
        $MA['###LOCSTREET###'] = ($location['street'] ? $this->cObj->stdWrap($location['street'], $lConf['locationStreetWrap.']) : '');
        $MA['###LOCZIP###'] = ($location['zip'] ? $this->cObj->stdWrap($location['zip'], $lConf['locationZipWrap.']) : '');
        $MA['###LOCCITY###'] = ($location['city'] ? $this->cObj->stdWrap($location['city'], $lConf['locationCityWrap.']) : '');
        $MA['###LOCPHONE###'] = ($location['phone'] ? $this->cObj->stdWrap($location['phone'], $lConf['locationPhoneWrap.']) : '');
        $MA['###LOCFAX###'] = ($location['fax'] ? $this->cObj->stdWrap($location['fax'], $lConf['locationFaxWrap.']) : '');
        $MA['###LOCEMAIL###'] = ($location['email'] ? $this->cObj->stdWrap($location['email'], $lConf['locationEmailWrap.']) : '');
        $MA['###LOCPERSON###'] = ($location['person'] ? $this->cObj->stdWrap($location['person'], $lConf['locationPersonWrap.']) : '');

    }

    function searchCourse($sWord)
    {
        $debugme = false;

        $searchApi = t3lib_div::makeInstance('tslib_search');
        $searchApi->register_tables_and_columns($this->conf['searchcoursefields'], $this->conf['searchcoursefields']);
        $searchApi->register_and_explode_search_string($sWord);
        $searchApi->build_search_query('');
        $searchApi->queryParts['SELECT'] .= ',tx_abcourses_categorie.uid As catId';
        $searchApi->queryParts['FROM'] .= ',tx_abcourses_course_categorie_mm, tx_abcourses_categorie';
        $searchApi->queryParts['WHERE'] .= ' AND ' . $searchApi->fTable . '.uid=tx_abcourses_course_categorie_mm.uid_local';
        $searchApi->queryParts['WHERE'] .= ' AND tx_abcourses_categorie.uid=tx_abcourses_course_categorie_mm.uid_foreign';
        $searchApi->queryParts['WHERE'] .= $this->cObj->enableFields('tx_abcourses_course');
        $searchApi->queryParts['GROUPBY'] = '';

        if ($debugme) {
            debug('searchCourse()');
            debug($searchApi->sword_array);
            debug($searchApi->queryParts);
        }

        $searchApi->execute_query();
        $result = $searchApi->result;
        unset($searchApi);

        return $result;
    }

    private function addParticipant($MAForm)
    {
        $eventId = intval($MAForm['###EVENTID###']);

        //get the loader object
        $objLoader =& $GLOBALS['T3_VAR']['abcourses']['cLoader'];
        $participant =& $this->getParticipantToSubscribe($MAForm);
        $beUserId = intval($this->conf['beUserId']);
        $participantId = intval($participant->getSingleData("uid"));

        if ($participant instanceof cParticipant) {
            $mmData = new DataArray();
            $mmData->add("uid_local", $eventId);
            $mmData->add("uid_foreign", $participantId);
            //create an appropriate mm record
            $mmId = QueryUtil::createRecord("tx_abcourses_event_participants_mm", '', $mmData, $beUserId);
            //raise the reference counter within the event table
            $this->incrementSubscriptions($eventId, "tx_abcourses_event");
        }
    }

    /**
     *
     * @param $MAForm
     * @return DataArray
     */
    private function &getParticipantDataFromForm($MAForm)
    {
        $eventId = intval($MAForm['###EVENTID###']);
        if ($eventId >= 0) {
            $participantData = new DataArray();
            $mappingConfig = $this->conf['subscribe.']['tt_address_mapping'];
            if ($mappingConfig) {
                $fieldPairs = explode(",", $mappingConfig);
                foreach ($fieldPairs as $index => $pair) {
                    $mapping = explode(":", $pair);
                    $participantData->add($mapping[0], $MAForm['###' . strtoupper($mapping[1]) . '###']);
                }
            }
            return $participantData;
        }
        return null;
    }

    /**
     * @param $MAForm
     * @return cParticipant
     */
    private function &getParticipantToSubscribe($MAForm)
    {
        $beUserId = intval($this->conf['beUserId']);
        $participantData = $this->getParticipantDataFromForm($MAForm);
        //get the loader object
        $objLoader =& $GLOBALS['T3_VAR']['abcourses']['cLoader'];
        //Try to find a similar participant
        $field = $this->conf['addressRecordUniqueField'];
        $value = $MAForm['###' . strtoupper($field) . '###'];
        $participant = $objLoader->get_ParticipantByUniqueField($field, $value);

        if (!($participant instanceof cParticipant)) {
            //Create a new address record
            $participantId = QueryUtil::createRecord("tt_address", '', $participantData, $beUserId);
            $participant = $objLoader->get_Participant($participantId);
        }

        return $participant;
    }


    /**
     * This function triggers an subscription hook and sends emails containing the subscription data.
     * It is responsible for increment the subscription counter for the subscribed event too.
     *
     * @param Array $MA    : Some marker arrays
     * @param Array $MACourse
     * @param Array $MAEvent
     * @param Array $MATrainer
     * @param Array $MALocation
     * @return boolean : true, if the mail could be sent.
     */
    function startSubscription($MA, $MACourse, $MAEvent, $MATrainer, $MALocation)
    {

        $hookAbort = false;
        //trigger an pre-subscription hook. The variable $hookAbort is passed into the expected method.
        //if you implement this as an reference in your hook handler, you can abort the subscription
        //an the user will get an error message
        if (is_array($GLOBALS['TYPO3_CONF_VARS']['EXTCONF'][$this->extKey][$this->prefixId]['subscription'])) {
            foreach ($GLOBALS['TYPO3_CONF_VARS']['EXTCONF'][$this->extKey][$this->prefixId]['subscription'] as $classRef) {
                $hookObj = & t3lib_div::getUserObj($classRef);
                if (method_exists($hookObj, 'startSubscription')) {
                    $hookObj->startSubscription($MA, $MACourse, $MAEvent, $MATrainer, $MALocation, $hookAbort, $this);
                }
            }
        }


        if ($hookAbort) return false;

        if (intval($this->conf['trackSubscriptionsAsRecords'])) {
            $this->addParticipant($MA);
        } else {
            if (isset($MA['###EVENTID###']) && $this->conf['usecontingent']) {
                $this->incrementSubscriptions($MA['###EVENTID###']);
            }
        }

        if (intval($this->conf['subscribe.']['sendEmailsAfterSubscription'])) {
            //If confirmation e-mail is wanted, call the corresponding function
            $statusMail = $this->sendMailToUser($MA, $MACourse, $MAEvent, $MATrainer, $MALocation);
        } else {
            $statusMail = true;
        }

        return $statusMail;
    }

    function incrementSubscriptions($id, $incrementFor = null)
    {
        $field = "";
        if ($incrementFor == "tx_abcourses_event") {
            $field = "participants";
        } else {
            $incrementFor = "tx_abcourses_event";
            $field = "subscriptions";
        }

        $id = intval($id);
        $res = $GLOBALS['TYPO3_DB']->exec_SELECTquery($field,
            $incrementFor,
            'uid = ' . $id);

        if (!$GLOBALS['TYPO3_DB']->sql_error) {
            if ($res && $GLOBALS['TYPO3_DB']->sql_num_rows($res) >= 1) {
                $event = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res);
                $count = intval($event[$field]);
            } else {
                debug($GLOBALS['TYPO3_DB']->debug());
                return 0;
            }
        }

        $res = $GLOBALS['TYPO3_DB']->exec_UPDATEquery($incrementFor,
            'uid = ' . $id,
            Array($field => $count + 1)
        );
    }


    function sendMailToUser($MA, $MACourse = '', $MAEvent = '', $MATrainer = '', $MALocation = '')
    {
        $lMailTemplatePlain = $this->cObj->getSubpart($this->template, '###MAILSUBSCRIBESUCCESSPLAIN###');
        $lMailCourseTemplatePlain = $this->cObj->getSubpart($lMailTemplatePlain, '###COURSE###');
        $lMailEventTemplatePlain = $this->cObj->getSubpart($lMailTemplatePlain, '###EVENT###');
        $lMailTrainerTemplatePlain = $this->cObj->getSubpart($lMailTemplatePlain, '###TRAINER###');
        $lMailLocationTemplatePlain = $this->cObj->getSubpart($lMailTemplatePlain, '###LOCATION###');
        $lMailHotelTemplatePlain = $this->cObj->getSubpart($lMailTemplatePlain, '###HOTEL###');
        $lMailNoLocationTemplatePlain = $this->cObj->getSubpart($lMailTemplatePlain, '###NOLOCATION###');

        if ($MALocation && !isset($MALocation['###NODATA###'])) {
            $lMailLocationTemplatePlain = $this->cObj->substituteMarkerArray($lMailLocationTemplatePlain, $MALocation);
        } else {
            $lMailLocationTemplatePlain = $lMailNoLocationTemplatePlain;
        }
        if ($MATrainer && !isset($MATrainer['###NODATA###'])) {
            $lMailTrainerTemplatePlain = $this->cObj->substituteMarkerArray($lMailTrainerTemplatePlain, $MATrainer);
        } else {
            $lMailTrainerTemplatePlain = '';
        }
        if ($MAEvent && !isset($MAEvent['###NODATA###'])) {
            $lMailEventTemplatePlain = $this->cObj->substituteMarkerArray($lMailEventTemplatePlain, $MAEvent);
        } else {
            $lMailEventTemplatePlain = '';
        }
        if ($MACourse && !isset($MACourse['###NODATA###'])) {
            $lMailCourseTemplatePlain = $this->cObj->substituteMarkerArray($lMailCourseTemplatePlain, $MACourse);
        } else {
            $lMailCourseTemplatePlain = '';
        }

        if ($lMailHotelTemplatePlain) {
            if (is_numeric($MA['###ARRANGEMENT###'])) {
                //load the objectlayer
                $objLoader =& $GLOBALS['T3_VAR']['abcourses']['cLoader'];
                $objHotel =& $objLoader->get_Hotel('', $MA['###ARRANGEMENT###']);
                $lMailTemplatePlain = $this->cObj->substituteSubpart($lMailTemplatePlain, '###HOTEL###', $objHotel->printme($lMailHotelTemplatePlain, $this, ''));
            } else {
                $lMailTemplatePlain = $this->cObj->substituteSubpart($lMailTemplatePlain, '###HOTEL###', '');
            }
        }

        $lMailTemplatePlain = $this->cObj->substituteSubpart($lMailTemplatePlain, '###LOCATION###', $lMailLocationTemplatePlain);
        $lMailTemplatePlain = $this->cObj->substituteSubpart($lMailTemplatePlain, '###NOLOCATION###', '');
        $lMailTemplatePlain = $this->cObj->substituteSubpart($lMailTemplatePlain, '###TRAINER###', $lMailTrainerTemplatePlain);
        $lMailTemplatePlain = $this->cObj->substituteSubpart($lMailTemplatePlain, '###EVENT###', $lMailEventTemplatePlain);
        $lMailTemplatePlain = $this->cObj->substituteSubpart($lMailTemplatePlain, '###COURSE###', $lMailCourseTemplatePlain);
        $lMailTemplatePlain = $this->cObj->substituteMarkerArray($lMailTemplatePlain, $MA);

        //strip html and php tags
        $lMailTemplatePlain = strip_tags($lMailTemplatePlain);

        $MAMail = array();

        $MAMail['###MAILSALUTATION###'] = $this->pi_getLL('mailsalutation');
        $MAMail['###MAILTEASER###'] = $this->pi_getLL('mailteaser');
        $MAMail['###LABELEVENTINFO###'] = $this->pi_getLL('labeleventinfo');
        $MAMail['###LABELLOCATIONINFO###'] = $this->pi_getLL('labellocationinfo');
        $MAMail['###LABELNOLOCATION###'] = $this->pi_getLL('labelnolocation');
        $MAMail['###MAILFOOTER###'] = $this->pi_getLL('mailfooter');
        $MAMail['###LABELREGARDS###'] = $this->pi_getLL('labelregards');
        $MAMail['###LABELFORMDATA###'] = $this->pi_getLL('labelformdata');

        $sFormdata = '';

        foreach ($MA as $key => $value) {
            $label = strtolower(trim($key, "#"));

            $mailLabels = $this->conf['subscribe.']['mailLabels'];

            $pos = strpos($mailLabels, $label);
            if (!($pos === false) && $value) {
                $sFormdata .= $this->pi_getLL($label, ucfirst($label)) . ': ';
                //Next line is important to avoid Mailform injection
                $sFormdata .= wordwrap(rawurldecode($value)) . "\n";
            }
        }

        $MAMail['###FORMDATA###'] = strip_tags($sFormdata);
        $mailSubject = $this->pi_getLL('mailsubjectadmin', 'Course subscription ') . $MAEvent['###EVENTNUMBER###'];


        $lMailTemplatePlain = $this->cObj->substituteMarkerArray($lMailTemplatePlain, $MAMail);
        $lMailTemplatePlain = $this->cObj->substituteMarkerArray($lMailTemplatePlain, $this->MALabels);

        //admin mail
        $mailTo = $this->conf['subscribe.']['sendTo'];

        $mailFrom = $this->conf['subscribe.']['mailFrom'];

        $mailFromName = $this->conf['subscribe.']['mailFromName'];

        $fStatusAdmin = false;

        try {
            //send the admin mail
            $mail = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstance('TYPO3\\CMS\\Core\\Mail\\MailMessage');
            $mail->setFrom(array($mailFrom=>$mailFromName))
                ->setTo($mailTo)
                ->setSubject($mailSubject)
                ->setBody($lMailTemplatePlain)
                ->send();
            $failedRecipients = $mail->getFailedRecipients();
            $fStatusAdmin = $mail->isSent() && empty($failedRecipients);
        } catch (Exception $e) {
            $fStatusAdmin = false;
        }

        //send an confirmation mail to the subscriber
        if (intval($this->conf['subscribe.']['sendConfirmation']) && t3lib_div::validEmail($MA['###EMAIL###'])) {
            $mailTo = $MA['###EMAIL###'];

            $mail = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstance('TYPO3\\CMS\\Core\\Mail\\MailMessage');
            $mail->setFrom(array($mailFrom=>$mailFromName))
                ->setTo($mailTo)
                ->setSubject($mailSubject)
                ->setBody($lMailTemplatePlain)
                ->send();
        }

        /**
         * to ensure that the teaching company notice the subscription, the error message depends on the
         * fStatusAdmin flag.
         */
        return $fStatusAdmin;
    }

    function fillAllLabels(&$MA, $loadFilter = 0)
    {
        if ($this->labelset) {
            return;
        }
        if (!isset($MA['###DAYSLABEL###'])) {
            $MA['###DAYSLABEL###'] = $this->pi_getLL('labeldays', 'Days');
        }
        if (!isset($MA['###LABELWARNING###'])) {
            $MA['###LABELWARNING###'] = '';
        }
        if (!isset($MA['###WARNING###'])) {
            $MA['###WARNING###'] = '';
        }
        $MA['###LABELTRAINER###'] = $this->pi_getLL('labeltrainer', 'Trainer');

        $MA['###LABELTITLE###'] = $this->pi_getLL('labeltitle', 'Form of address');
        $i = 0;
        while ($this->pi_getLL('labeltitle.I.' . $i, 0)) {
            $MA['###LABELTITLE.I.' . $i . '###'] = $this->pi_getLL('labeltitle.I.' . $i, '');
            $i++;
        }

        $MA['###LABELADDITIONAL###'] = $this->pi_getLL('labeladditional', '');
        $i = 0;
        while ($this->pi_getLL('labeladditional.I.' . $i, 0)) {
            $MA['###LABELADDITIONAL.I.' . $i . '###'] = $this->pi_getLL('labeladditional.I.' . $i, '');
            $i++;
        }
        $MA['###LABELSELPERIODSTART###'] = $this->pi_getLL('labelselperiodstart');
        $MA['###LABELSELPERIODEND###'] = $this->pi_getLL('labelselperiodend');
        $MA['###LABELACCOMMODATION###'] = $this->pi_getLL('labelaccommodation', 'Accommodation');
        $MA['###LABELCOURSEDAYS###'] = $this->pi_getLL('labelcoursedays', '');
        $MA['###LABELSUBMIT###'] = $this->pi_getLL('labelsubmitsearch', 'Search');
        $MA['###LABELSUBMITSUBSCRIBE###'] = $this->pi_getLL('labelsubmitsubscribe', '');
        $MA['###LABELSUBSCRIBEHEADER###'] = $this->pi_getLL('labelheadersubscribe');
        $MA['###LABELNAME###'] = $this->pi_getLL('labelname');
        $MA['###LABELLASTNAME###'] = $this->pi_getLL('labellastname');
        $MA['###LABELCOMPANY###'] = $this->pi_getLL('labelcompany');
        $MA['###LABELADDRESS###'] = $this->pi_getLL('labeladdress');
        $MA['###LABELINVOICEADDRESS###'] = $this->pi_getLL('labelinvoiceaddress');
        $MA['###LABELEMAIL###'] = $this->pi_getLL('labelemail');
        $MA['###LABELPHONE###'] = $this->pi_getLL('labelphone');
        $MA['###TAXLABEL###'] = $this->cObj->substituteMarker($this->pi_getLL('taxlabel'), '###TAX###', $this->conf['taxValue']);
        $MA['###LABELARRANGEMENTSDESC###'] = $this->cObj->substituteMarker($this->pi_getLL('labelarrangementsdesc'), '###TAXLABEL###', $MA['###TAXLABEL###']);
        $MA['###CUR###'] = (isset($this->conf['currency']) ? $this->conf['currency'] : 'EUR');
        $MA['###LABELTEACHINGAIDS###'] = $this->pi_getLL('labelteachingaids');
        $MA['###LABELSIMILAR###'] = $this->pi_getLL('labelsimilar');
        $MA['###LABELPAGES###'] = $this->pi_getLL('labelpages');
        $MA['###LABELPOINTS###'] = $this->pi_getLL('labelpoints');
        $MA['###LABELEVENT###'] = $this->pi_getLL('labelevent');
        $MA['###LABELNOEVENTS###'] = $this->pi_getLL('labelnoevents');
        $MA['###LABELEVENTTITLE###'] = $this->pi_getLL('labeleventtitle');
        $MA['###LABELCATOVERVIEW###'] = $this->pi_getLL('labelcatoverview');
        $MA['###LABELDATE###'] = $this->pi_getLL('labeldate');
        $MA['###LABELPRICE###'] = $this->pi_getLL('labelprice');
        $MA['###LABELPARTICIPIANTS###'] = $this->pi_getLL('labelparticipiants');
        $MA['###LABELREGSTART###'] = $this->pi_getLL('labelregstart');
        $MA['###LABELREGEND###'] = $this->pi_getLL('labelregend');
        $MA['###LABELCOURSENUMBER###'] = $this->pi_getLL('labelcoursenumber');
        $MA['###EDUPOINTSLABEL###'] = $this->pi_getLL('labelpoints');
        $MA['###CONDITIONSLABEL###'] = $this->pi_getLL('labelconditions');
        $MA['###LABELNORESULTS###'] = $this->pi_getLL('nosearchresultlabel');
        $MA['###LABELERRORCONTACTUS###'] = $this->pi_getLL('labelerrorcontactus');
        $MA['###LINKCATOVERVIEW###'] = $this->cObj->stdWrap($this->pi_LinkToPage($this->pi_getLL('catoverview_link'), $this->conf['pidOverview'], ''), $this->conf['linkCatoverviewWrap.']);
        $MA['###LINKDETAILSEARCH###'] = $this->cObj->stdWrap($this->pi_LinkToPage($this->pi_getLL('detailsearch_link'), $this->conf['pidDetailsearch'], ''), $this->conf['linkDetailsearchWrap.']);
        $MA['###LINKLMOVERVIEW###'] = $this->cObj->stdWrap($this->pi_LinkToPage($this->pi_getLL('lmoverview_link'), $this->conf['pidLMOverview'], ''), $this->conf['linkLMOverviewWrap.']);

        $MA['###LABELLOCNAME###'] = $this->pi_getLL('labellocname');
        $MA['###LABELLOCSTREET###'] = $this->pi_getLL('labellocstreet');
        $MA['###LABELLOCZIP###'] = $this->pi_getLL('labelloczip');
        $MA['###LABELLOCCITY###'] = $this->pi_getLL('labelloccity');
        $MA['###LABELLOCPHONE###'] = $this->pi_getLL('labellocphone');
        $MA['###LABELLOCFAX###'] = $this->pi_getLL('labellocfax');
        $MA['###LABELLOCEMAIL###'] = $this->pi_getLL('labellocemail');
        $MA['###LABELLOCPERSON###'] = $this->pi_getLL('labellocperson');
        $MA['###REQUIREDHINT###'] = $this->pi_getLL('requiredhint');

        $MA['###LABELLOCATIONINFO###'] = $this->pi_getLL('labellocationinfo');
        $MA['###LABELBACKTOCOURSE###'] = $this->pi_getLL('labelbacktocourse');

        $MA['###LABELMAX###'] = $this->pi_getLL('labelmax');
        $MA['###LABELCOURSETYPE###'] = $this->pi_getLL('labelcoursetype');

        $MA['###LABELHEADERSEARCHRESULTS###'] = $this->pi_getLL('labelheadersearchresults');

        $MA['###LABELPARTICIPANTS###'] = $this->pi_getLL('labelparticipants');
        $MA['###LABELMALE###'] = $this->pi_getLL('labelmale');
        $MA['###LABELFEMALE###'] = $this->pi_getLL('labelfemale');

        //if ($loadFilter) $this->fillFilterLabels($MA);
        $this->fillFilterLabels($MA);

        $this->fillAddOnLabels($MA);

        if (is_array($GLOBALS['TYPO3_CONF_VARS']['EXTCONF'][$this->extKey][$this->prefixId]['fillAllLabels'])) {
            foreach ($GLOBALS['TYPO3_CONF_VARS']['EXTCONF'][$this->extKey][$this->prefixId]['fillAllLabels'] as $classRef) {
                $hookObj = & t3lib_div::getUserObj($classRef);
                if (method_exists($hookObj, 'customFillAllLabels')) {
                    $hookObj->customFillAllLabels($MA);
                }
            }
        }

        $this->labelset = true;
    }

    function fillFilterLabels(&$MA)
    {
        $MA['###FILTERFORMSTART###'] = '<form class="abcourses-filterform" action="' . $this->pi_getPageLink($GLOBALS['TSFE']->id, '', '') . '" method="post">';

        //FILTER CATEGORY
        $MA['###FILTERCATEGORIE###'] = "\t<option value='0'></option>\r\n";
        $arrIterate = $this->getCategoryArray();

        foreach ($arrIterate as $idCategory => $CategoryTitle) {
            $MA['###FILTERCATEGORIE###'] .= "\t<option value=\"" . $idCategory . "\" " . ($this->piVars['filter.category'] == $idCategory ? 'selected="selected"' : '') . ">" . $CategoryTitle . "</option>\r\n";
        }
        if ($MA['###FILTERCATEGORIE###'] != '') {
            $MA['###FILTERCATEGORIE###'] = "<select name=\"" . $this->prefixId . '[filter.category]' . "\" >\r\n" . $MA['###FILTERCATEGORIE###'] . "\r\n</select>";
        }
        unset($arrIterate);

        //FILTER COURSE
        $MA['###FILTERCOURSE###'] = '';


        //FILTER LOCATION
        $MA['###FILTERLOCATION###'] = "\t<option value='0'></option>\r\n";
        $arrIterate = $this->getLocationArray();
        if (is_array($arrIterate)) {
            foreach ($arrIterate as $idLocation => $LocationTitle) {
                $MA['###FILTERLOCATION###'] .= "\t<option value=\"" . $idLocation . "\" " . ($this->piVars['filter.location'] == $idLocation ? 'selected="selected"' : '') . ">" . $LocationTitle . "</option>\r\n";
            }
            if ($MA['###FILTERLOCATION###'] != '') {
                $MA['###FILTERLOCATION###'] = "<select name=\"" . $this->prefixId . '[filter.location]' . "\" >\r\n" . $MA['###FILTERLOCATION###'] . "\r\n</select>";
            }
        }
        unset($arrIterate);

        $MA['###FILTERLASTMINUTE###'] = '';
        $MA['###FILTERTYPE###'] = '';
        $MA['###FILTERLEVEL###'] = '';
        $MA['###FILTERTEXT###'] = '<input type="text" name="' . $this->prefixId . '[filtertext]' . '">';

        $MA['###FILTERFORMSUBMIT###'] = '<input type="submit" value="' . $this->pi_getLL('filterform_submit') . '">';
        $MA['###FILTERFORMEND###'] = '</form>';
        $MA['###FILTERCLEARFILTER###'] = '';

        $MA['###LBFILTERFORMSTART###'] = $this->pi_getLL('lbfilterformstart');
        $MA['###LBFILTERCATEGORIE###'] = $this->pi_getLL('lbfiltercategorie');
        $MA['###LBFILTERCOURSE###'] = $this->pi_getLL('lbfiltercourse');
        $MA['###LBFILTERLOCATION###'] = $this->pi_getLL('lbfilterlocation');
        $MA['###LBFILTERLASTMINUTE###'] = $this->pi_getLL('lbfilterlastminute');
        $MA['###LBFILTERTYPE###'] = $this->pi_getLL('lbfiltertype');
        $MA['###LBFILTERLEVEL###'] = $this->pi_getLL('lbfilterlevel');
        $MA['###LBFILTERTEXT###'] = $this->pi_getLL('lbfiltertext');
    }

    /**
     * If you need some marker for your template which are not available for this extension,
     * just give them a name in the addOnLabel TS Config of abcourses and add them to the
     * pi1 locallang.xml. Then they are available in all views of abcourses.
     * You can not override existing markers with this!
     *
     * @param array $MA Reference to the marker array
     */
    function fillAddOnLabels(&$MA)
    {
        if ($this->conf['addOnLabels']) {
            $arrAddOn = explode(",", $this->conf['addOnLabels']);
            if (is_array($arrAddOn)) {
                $marker = null;
                while (list($count, $value) = each($arrAddOn)) {
                    $marker = "###" . strtoupper(trim($value)) . "###";
                    if (!$MA[$marker]) {
                        $MA[$marker] = $this->pi_getLL(strtolower(trim($value)), $marker);
                    }
                }
            }
        }
    }


    function getCategoryArray()
    {
        //Objektlayer laden
        $objLoader =& $GLOBALS['T3_VAR']['abcourses']['cLoader'];

        //Existenz einer cCategorys Instanz prüfen
        if (!$GLOBALS['T3_VAR']['abcourses']['cCategorys']) {
            $GLOBALS['T3_VAR']['abcourses']['cCategorys'] =& $objLoader->get_objCategorys();
        }

        $objCategorys =& $GLOBALS['T3_VAR']['abcourses']['cCategorys'];
        $arr = $objCategorys->getCategoryUidTitleArray();

        return $arr;
    }


    /**
     * Returns an array with uid/title pairs of available locations. Returns false if no location is available.
     *
     * @return array : uid/title pair || false
     */
    function getLocationArray()
    {
        //Objektlayer laden
        $objLoader =& $GLOBALS['T3_VAR']['abcourses']['cLoader'];

        //Existenz einer cLocations Instanz prüfen
        if (!$GLOBALS['T3_VAR']['abcourses']['cLocations']) {
            $GLOBALS['T3_VAR']['abcourses']['cLocations'] =& $objLoader->get_objLocations();
        }

        $objLocations =& $GLOBALS['T3_VAR']['abcourses']['cLocations'];

        if ($objLocations) {
            $arr = $objLocations->getLocationUidTitleArray();
        } else {
            $arr = false;
        }

        return $arr;
    }


    function pi_linkTPWithAnchor($str, $anchor, $urlParameters = array(), $cache = 0, $altPageId = 0)
    {
        $conf = array();
        $conf['useCacheHash'] = $this->pi_USER_INT_obj ? 0 : $cache;
        $conf['no_cache'] = $this->pi_USER_INT_obj ? 0 : !$cache;
        $conf['section'] = $anchor;
        $conf['parameter'] = ($altPageId ? $altPageId : $GLOBALS['TSFE']->id); // . ($anchor?' ' . '#' . $anchor:'');
        $conf['additionalParams'] = $this->conf['parent.']['addParams'] . t3lib_div::implodeArrayForUrl('', $urlParameters, ' ', 1) . $this->pi_moreParams;
        return $this->cObj->typoLink($str, $conf);

    } // end of pi_linkTPWithAnchor

    /**
     * This function renders an select-box for html forms.
     *
     * @param string $name : Name attribute
     * @param array $fieldList : Array with the wanted options
     * @param string $actValue : If the form was send before, this value marks the currently selected value
     * @param boolean $renderEmptyOption : Set this to true if you want an empty select option first
     * @return string : the rendered select box
     */
    function renderSelectBox($name, $fieldList, $actValue = false, $renderEmptyOption = true)
    {

        $options = '';
        if ($renderEmptyOption) {
            $options .= '<option ' . (!$actValue ? 'selected' : '') . '> </option>';
        }
        if (is_array($fieldList)) {
            foreach ($fieldList as $key => $value) {
                $options .= "\t" . '<option ' . ($actValue == $value ? 'selected' : '') . ">$value</option>\n";
            }
        }
        return "<select name=\"$name\">\n" . $options . "\n</select>";
    }

}

if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/abcourses/pi1/class.tx_abcourses_pi1.php']) {
    include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/abcourses/pi1/class.tx_abcourses_pi1.php']);
}
?>